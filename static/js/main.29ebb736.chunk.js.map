{"version":3,"sources":["components/Post/Votes.jsx","components/Post/TitleAndMetadata.jsx","components/Post/Thumbnail.jsx","components/shared/ExpandProvider.jsx","components/Post/Video.jsx","components/Post/AnimatedHover.jsx","components/shared/Collapse.jsx","components/shared/useMeasure.js","components/Post/PostMedia.jsx","components/Post/Post.jsx","components/Post/PostsList.jsx","consts.js","components/SubReddit/SubRedditHeader.jsx","components/SubReddit/SubReddit.jsx","components/App/AppBar.jsx","components/App/AboutModal.jsx","components/App/AppDrawer.jsx","components/App/AppBarAndDrawer.jsx","components/App.jsx","index.js"],"names":["upvoteColor","downvoteColor","root","css","iconButtonCss","VoteState","UPVOTE","NO_VOTE","DOWNVOTE","Votes","props","num","useState","voteState","setVoteState","handleVote","nextState","currentColor","getColorByState","makeButtonCss","desiredButtonState","upButtonCss","downButtonCss","textCss","aria-label","onClick","variant","votes","toFixed","title","memo","post","postLink","permalink","href","target","rel","he","decode","subreddit_name_prefixed","thumbnail","Thumbnail","alt","localExpandString","localStorage","getItem","defaultExpand","JSON","parse","ExpandContext","React","createContext","ExpandProvider","children","context","Provider","value","useExpand","useContext","autoExpand","setAutoExpand","newExpand","setItem","video","src","muted","loop","autoPlay","controls","calc","x","y","window","innerHeight","innerWidth","trans","s","useSpring","xys","config","mass","tension","friction","hoverProps","set","div","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","Collapse","isOpen","ref","useRef","left","top","width","height","bounds","ResizeObserver","entry","contentRect","ro","useEffect","current","observe","disconnect","useMeasure","bind","from","content","sourceImg","text","embed","PostMedia","expanded","hasImage","hasVideo","hasEmbed","hasText","htmlEmbed","media","reddit_video","fallback_url","dangerouslySetInnerHTML","__html","url","source","selftext","rootCard","postSummary","exapndIcon","Post","growIn","setExpanded","deg","expandIconDirection","handleExpanded","hasThumbnail","Boolean","startsWith","urlWithoutQuery","split","some","ext","endsWith","length","media_embed","canExpand","useMemo","in","timeout","ups","thumbnail_height","aria-expanded","whyDidYouRender","PostsList","posts","loadingPosts","map","key","id","redditUrl","filters","label","githubLink","formControl","rowPadding","breakWord","SubRedditHeader","subreddit","filter","onSelection","container","justify","item","xs","sm","md","lg","onChange","e","input","labelWidth","centeredProgress","bigProgress","ErrorDisplay","error","gutterBottom","response","defaultFilter","SubReddit","setPosts","setLoadingPosts","lastRequestResult","setLastRequestResult","setError","loadingMore","setLoadingMore","setFilter","filterType","time","requestUrl","requestResToPosts","res","data","obj","setUniquePosts","newPosts","uniqBy","axios","get","then","catch","err","after","morePosts","concat","handleScroll","el","document","getElementById","getBoundingClientRect","bottom","addEventListener","removeEventListener","SearchAppBar","classes","className","position","toolbar","onMenuClick","menuButton","color","noWrap","grow","search","searchIcon","placeholder","inputRoot","inputInput","onKeyPress","event","scrollTo","onSubredditChange","withStyles","theme","flexGrow","marginLeft","marginRight","display","breakpoints","up","borderRadius","shape","backgroundColor","fade","palette","common","white","spacing","unit","pointerEvents","alignItems","justifyContent","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","minHeight","AboutModal","open","onClose","aria-labelledby","aria-describedby","autoFocus","autoExpandListItem","formControlLabel","AppDrawer","onOpen","aboutOpen","setAboutOpen","button","primary","control","checked","AppBarAndDrawer","drawerOpen","setDrawerOpen","Fragment","selected","scrollbar","darkColor","defaultVariant","App","setSubreddit","themeVariant","setThemeVariant","createMuiTheme","main","red","secondary","type","typography","useNextVariants","linkColor","bgColor","global","StylesProvider","injectFirst","styles","trim","newTheme","ReactDOM","render"],"mappings":"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","file":"static/js/main.29ebb736.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { useState } from \"react\";\nimport { jsx, css } from \"@emotion/core\";\nimport PropTypes from \"prop-types\";\nimport { Typography, IconButton } from \"@material-ui/core\";\nimport UpVote from \"@material-ui/icons/ExpandLess\";\nimport DownVote from \"@material-ui/icons/ExpandMore\";\n\nconst upvoteColor = \"#FF8b60\";\nconst downvoteColor = \"#9494FF\";\n\nconst root = css`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  margin: auto 4% auto 0;\n`;\nconst iconButtonCss = css`\n  padding: 7px 0;\n  width: 40px;\n`;\n\nconst VoteState = {\n  UPVOTE: 1,\n  NO_VOTE: 0,\n  DOWNVOTE: -1\n};\n\nfunction getColorByState(voteState) {\n  switch (voteState) {\n  case VoteState.UPVOTE:\n    return upvoteColor;\n  case VoteState.DOWNVOTE:\n    return downvoteColor;\n  default:\n    return 'inherit';\n  }\n}\n\nfunction kFormatter(num) {\n  return num > 999 ? \n    (num / 1000).toFixed(1) + 'k' \n    : num;\n}\n\nfunction Votes(props) {\n  const [voteState, setVoteState] = useState(VoteState.NO_VOTE);\n\n  const handleVote = nextState => () => {\n    if (nextState === voteState) setVoteState(VoteState.NO_VOTE);\n    else setVoteState(nextState);\n  };\n\n  const currentColor = getColorByState(voteState);\n  const makeButtonCss = desiredButtonState => css`\n    ${iconButtonCss};\n    ${voteState === desiredButtonState && `color: ${currentColor};`}\n  `;\n  const upButtonCss = makeButtonCss(VoteState.UPVOTE);\n  const downButtonCss = makeButtonCss(VoteState.DOWNVOTE);\n  const textCss = (voteState === VoteState.NO_VOTE) ? css`` : \n    css`\n      color: ${currentColor};\n    `;\n  return (\n    <div css={root}>\n      <IconButton\n        css={upButtonCss} aria-label=\"Upvote\" \n        onClick={handleVote(VoteState.UPVOTE)}\n      >\n        <UpVote />\n      </IconButton>\n\n      <Typography variant=\"h5\" css={textCss}>\n        {kFormatter(props.votes + voteState)}\n      </Typography>\n\n      <IconButton\n        css={downButtonCss} aria-label=\"Downvote\"\n        onClick={handleVote(VoteState.DOWNVOTE)}\n      >\n        <DownVote />\n      </IconButton>\n    </div>\n  );\n}\n\nVotes.propTypes = {\n  votes: PropTypes.number.isRequired\n};\n\nexport default Votes;\n","/** @jsx jsx */\nimport { memo } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport {Typography} from '@material-ui/core';\nimport he from 'he';\n\nconst root = css`\n  margin: auto 0;\n  h4 {\n    font-size: 12pt;\n  }\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\nconst title = css`\n  margin-bottom: 1em;\n`;\n\nfunction TitleAndMetadata({ post }) {\n  const postLink = `https://www.reddit.com${post.permalink}`;\n\n  return (\n    <div css={root}>\n      <Typography variant=\"h5\" css={title}>\n        <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          {he.decode(post.title)}\n        </a>\n      </Typography>\n      <div>\n        <Typography variant='h4'>\n          {post.subreddit_name_prefixed}\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nTitleAndMetadata.propTypes = {\n  post: PropTypes.object.isRequired\n};\n\nexport default memo(TitleAndMetadata);","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\n\nconst thumbnail = css`\n  margin: auto 4% auto 0;\n  width: auto;\n  max-height: 7em;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  @media only screen and (max-width: 768px) {\n    max-width: 25%;\n    height: auto;\n    align-self: center;\n  }\n`;\n\nfunction Thumbnail(props){\n  return (\n    <img alt='thumbnail' css={thumbnail} {...props} />\n  );\n}\n\nThumbnail.propTypes = {\n  src: PropTypes.string.isRequired,\n  height: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Thumbnail;","import React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nconst localExpandString = localStorage.getItem('autoExpand');\nconst defaultExpand = \n  (localExpandString && JSON.parse(localExpandString)) || false;\nexport const ExpandContext = React.createContext(defaultExpand);\n\nexport default function ExpandProvider({children}) {\n  const [autoExpand, setAutoExpand] = useState(defaultExpand);\n  const context = [autoExpand, setAutoExpand];\n\n  return (\n    <ExpandContext.Provider value={context}>\n      {children}\n    </ExpandContext.Provider>\n  );\n}\n\nExpandProvider.propTypes = {\n  children: PropTypes.any\n};\n\nexport function useExpand() {\n  const [autoExpand, setAutoExpand] = useContext(ExpandContext);\n  const setAutoExpandToLocalStorage = (newExpand) => {\n    if (newExpand !== autoExpand) {\n      localStorage.setItem('autoExpand', newExpand);\n      setAutoExpand(newExpand);\n    }\n  };\n\n  return [autoExpand, setAutoExpandToLocalStorage];\n}\n\n","/** @jsx jsx */\nimport { memo } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\n\nconst video = css`\n  max-height: 30em;\n  max-width: 100%;\n`;\n\nfunction Video({src}) {\n  return (\n    <video muted loop autoPlay controls css={video}>\n      <source src={src}/>\n    </video>\n  );\n}\n\nVideo.propTypes = {\n  src: PropTypes.string.isRequired\n};\n\nexport default memo(Video);","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSpring, animated } from \"react-spring\";\n\nconst calc = (x, y) => [\n  -(y - window.innerHeight / 2) / 20,\n  (x - window.innerWidth / 2) / 20,\n  1.25\n];\nconst trans = (x, y, s) => \n  `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\nfunction AnimatedHover (props) {\n  const [hoverProps, set] = useSpring(() => ({\n    xys: [0, 0, 1],\n    config: { mass: 3, tension: 400, friction: 40 }\n  }));\n\n  return (\n    <animated.div\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\n      style={{ transform: hoverProps.xys.interpolate(trans) }}\n    > \n      {props.children}\n    </animated.div>\n  );\n}\n\nAnimatedHover.propTypes = {\n  children: PropTypes.object.isRequired\n};\n\nexport default memo(AnimatedHover);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useMeasure } from './useMeasure';\n\nfunction Collapse({ isOpen, children }) {\n  const [bind, {height}] = useMeasure();\n  const props = useSpring({\n    height: (isOpen ? height : 0),\n    from: {height: (isOpen ? 0 : height)}\n  });\n\n  return (\n    <animated.div style={props}>\n      <div {...bind}>\n        {children}\n      </div>\n    </animated.div>\n  );\n}\n\nCollapse.propTypes = {\n  children: PropTypes.any,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default Collapse;","import { useState, useRef, useEffect } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => void (ref.current = value), [value]);\n  return ref.current;\n}\n\nexport function useMeasure() {\n  const ref = useRef();\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\n  const [ro] = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)));\n  \n  useEffect(() => {\n    if (ref.current) ro.observe(ref.current);\n    return () => ro.disconnect();\n  }, [ro]);\n\n  return [{ ref }, bounds];\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport { Typography } from \"@material-ui/core\";\nimport Markdown from 'react-markdown';\nimport he from 'he';\nimport Video from './Video';\nimport AnimatedHover from './AnimatedHover';\nimport Collapse from '../shared/Collapse';\n\nconst content = css`\n  display: flex;\n  justify-content: center;\n  padding: 0 2em 1em 2em;\n  @media only screen and (max-width: 768px) {\n    padding: 5%;\n    padding-top: 0;\n  }\n`;\nconst sourceImg = css`\n  max-height: 70vh;\n  max-width: 100%;\n  margin: auto 0;\n  display: block;\n`;\nconst text = css`\n  overflow: auto;\n  @media only screen and (max-width: 768px) {\n    max-width: 85%;\n    margin: 0 auto;\n  }\n  p {\n    margin-top: 0;\n  }\n`;\nconst embed = css`\n  max-width: 100%;\n  display: flex;\n`\n\n// Stateless Component that displays the post media\nfunction PostMedia({ post, expanded, hasImage,\n  hasVideo, hasEmbed, hasText, htmlEmbed }) {\n\n  // Only renders one content component, depending on the media type\n  function renderContent() {\n    if (hasVideo)\n      return <Video src={post.media.reddit_video.fallback_url}/>;\n    else if (hasEmbed)\n      return <div css={embed} dangerouslySetInnerHTML={{__html: htmlEmbed}}/>;\n    else if (hasImage)\n      return (\n        <AnimatedHover>\n          <img src={post.url} alt='source' css={sourceImg}/>\n        </AnimatedHover>\n      );\n    else if (hasText)\n      return (\n        <Typography variant='h5' css={text}>\n          <Markdown source={he.decode(post.selftext)}/>\n        </Typography>\n      );\n    else return null;\n  }\n\n  return (\n    <Collapse isOpen={expanded}>\n      <div css={content}>\n        {renderContent()}\n      </div>\n    </Collapse>\n  );\n}\n\nPostMedia.propTypes = {\n  expanded: PropTypes.bool.isRequired,\n  hasEmbed: PropTypes.bool.isRequired,\n  hasImage: PropTypes.bool.isRequired,\n  hasText: PropTypes.bool.isRequired,\n  hasVideo: PropTypes.bool.isRequired,\n  htmlEmbed: PropTypes.any,\n  post: PropTypes.object.isRequired,\n};\n\nexport default PostMedia;","/** @jsx jsx */\nimport { useState, useEffect, useMemo, memo } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport { Card, IconButton, Grow } from \"@material-ui/core\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport he from 'he';\nimport Votes from \"./Votes\";\nimport TitleAndMetadata from \"./TitleAndMetadata\";\nimport Thumbnail from './Thumbnail';\nimport { useExpand } from '../shared/ExpandProvider';\nimport PostMedia from './PostMedia';\n\nconst rootCard = css`\n  min-width: 275px;\n  margin: 1em auto;\n  h5 {\n    font-size: 13pt;\n  }\n`;\nconst postSummary = css`\n  display: flex;\n  padding: 1em 3%;\n`;\nconst exapndIcon = css`\n  height: fit-content;\n  margin: auto 0 auto auto;\n  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n`;\n\nfunction Post({ post, width, growIn = true}) {\n  const [autoExpand] = useExpand();\n  const [expanded, setExpanded] = useState(autoExpand);\n\n  const deg = expanded ? 180 : 0;\n  const expandIconDirection = css`\n    transform: rotate(${deg}deg);\n  `;\n\n  const handleExpanded = () => setExpanded(!expanded);\n\n  // Change Post expansion when auto expand chnages\n  useEffect(() => {\n    setExpanded(autoExpand);\n  }, [autoExpand]);\n\n  // Different media logic\n  const hasThumbnail = Boolean(post.thumbnail.startsWith('http'));\n  const urlWithoutQuery = post.url.split('?')[0];\n  const hasImage = Boolean(['.jpg', '.jpeg', '.gif', '.png']\n    .some(ext => urlWithoutQuery.endsWith(ext)));\n  const hasText = Boolean(post.selftext && (post.selftext.length > 0));\n  const hasVideo = Boolean(post.media && post.media.reddit_video &&\n    post.media.reddit_video.fallback_url);\n  const hasEmbed = Boolean(post.media_embed && post.media_embed.content);\n  const canExpand = (hasImage || hasText || hasVideo || hasEmbed);\n\n  // Avoids decoding when embed doesn't change\n  const htmlEmbed = useMemo(() => hasEmbed && he.decode(post.media_embed.content), [hasEmbed, post]);\n\n  return (\n    <Grow in={growIn} timeout={500}>\n      <Card css={rootCard}>\n        <div css={postSummary}>\n          <Votes votes={post.ups} />\n          {hasThumbnail &&\n          <Thumbnail src={post.thumbnail}\n            height={post.thumbnail_height} onClick={handleExpanded}/>}\n          <TitleAndMetadata post={post}/>\n          {canExpand &&\n          <IconButton css={[exapndIcon, expandIconDirection]}\n            onClick={handleExpanded} aria-expanded={expanded}>\n            <ExpandMoreIcon/>\n          </IconButton>}\n        </div>\n        {canExpand &&\n        <PostMedia post={post} expanded={expanded} htmlEmbed={htmlEmbed}\n          hasEmbed={hasEmbed} hasImage={hasImage}\n          hasText={hasText} hasVideo={hasVideo} />}\n      </Card>\n    </Grow>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n  growIn: PropTypes.bool\n};\n\nPost.whyDidYouRender = true;\n\nexport default memo(Post);\n","/** @jsx jsx */\nimport { memo } from 'react';\nimport { jsx } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport Post from './Post';\n\nfunction PostsList({ posts, loadingPosts }) {\n  return (\n    posts && posts.map(post =>\n      <Post post={post} key={post.id} growIn={!loadingPosts}/>)\n  );\n}\n\nPostsList.propTypes = {\n  loadingPosts: PropTypes.bool.isRequired,\n  posts: PropTypes.array,\n};\n\nPostsList.whyDidYouRender = true;\n\nexport default memo(PostsList);","export const redditUrl = 'https://www.reddit.com';\n\nexport const filters = [\n  {label: 'Hot', value: 'hot'},\n  {label: 'Top Hour', value: 'top hour'},\n  {label: 'Top Day', value: 'top day'},\n  {label: 'Top Week', value: 'top week'},\n  {label: 'Top Month', value: 'top month'},\n  {label: 'Top All Time', value: 'top all'},\n  {label: 'New', value: 'new'},\n  {label: 'Best', value: 'best'},\n  {label: 'Controversial', value: 'controversial'},\n];\n\nexport const githubLink = 'https://github.com/orelkan/react-reddit-client';","/** @jsx jsx */\nimport { memo } from \"react\";\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport { Typography, FormControl, InputLabel,\n  Select, OutlinedInput, MenuItem, Grid } from \"@material-ui/core\";\nimport { filters } from '../../consts';\n\nconst formControl = css`\n  min-width: 120px;\n`;\nconst rowPadding = css`\n  @media only screen and (max-width: 768px) {\n    padding-bottom: 1em;\n  }\n`;\nconst breakWord = css`\n  overflow-wrap: break-word;\n`;\n\nfunction SubRedditHeader({ subreddit, filter, onSelection }) {\n  return (\n    <Grid container justify=\"space-between\">\n      <Grid item xs={12} sm={6} md={6} lg={6} css={rowPadding}>\n        <Typography variant=\"h2\" css={breakWord}>\n          {`/r/${subreddit}`}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <FormControl variant=\"outlined\" css={formControl}>\n          <InputLabel>Order</InputLabel>\n          <Select\n            value={filter}\n            onChange={e => onSelection(e.target.value)}\n            input={\n              <OutlinedInput labelWidth={43}/>\n            }\n          >\n            {filters.map(({ label, value }) => \n              <MenuItem key={value} value={value}>{label}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n      </Grid> \n    </Grid>\n  );\n}\n\nSubRedditHeader.propTypes = {\n  subreddit: PropTypes.string.isRequired,\n  filter: PropTypes.string.isRequired,\n  onSelection: PropTypes.func.isRequired,\n};\n\nSubRedditHeader.whyDidYouRender = true;\n\nexport default memo(SubRedditHeader);","/** @jsx jsx */\nimport { memo } from 'react';\nimport { useState, useEffect } from \"react\";\nimport { jsx, css } from '@emotion/core';\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { uniqBy } from 'lodash';\nimport { Typography, CircularProgress } from \"@material-ui/core\";\nimport PostsList from \"../Post/PostsList\";\nimport { redditUrl } from '../../consts';\nimport SubRedditHeader from './SubRedditHeader';\n\nconst root = css`\n  margin: 2em 7%;\n  @media only screen and (max-width: 768px) {\n    margin: 2em 4%;\n  }\n`;\nconst centeredProgress = css`\n  display: flex;\n  flex-direction: column;\n  margin: auto;\n`;\nconst bigProgress = css`\n  ${centeredProgress};\n  width: 8em !important;\n  height: 8em !important;\n  margin-top: 3em;\n`;\n\nconst ErrorDisplay = ({ error }) => (\n  <Typography variant=\"h3\" gutterBottom>\n    {error.response ? \"No such Subreddit\" : \"Network Error\"}\n  </Typography>\n);\n\nconst defaultFilter = 'hot';\n\nfunction SubReddit(props) {\n  const [posts, setPosts] = useState(null);\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [lastRequestResult, setLastRequestResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [filter, setFilter] = useState(defaultFilter);\n\n  // If the filter has a time aspect it will be seperated by space\n  // example: 'top hour'\n  const [filterType, time] = filter.split(' ');\n  const requestUrl = `${redditUrl}/r/${props.subreddit}/${filterType}.json` + \n  ((time) ? `?t=${time}` : '');\n  // Transform the raw data by extracting the nested posts\n  const requestResToPosts = res => res.data.data.children.map(obj => obj.data);\n  const setUniquePosts = newPosts => setPosts(uniqBy(newPosts, 'id'));\n\n  // Loading posts on subreddit or filter change\n  useEffect(() => {\n    setLoadingPosts(true);\n    axios\n      .get(requestUrl)\n      .then(res => {\n        const newPosts = requestResToPosts(res);\n        setLoadingPosts(false);\n        setLastRequestResult(res.data.data);\n        setError(null);\n        setUniquePosts(newPosts);\n      })\n      .catch(err => {\n        setLoadingPosts(false);\n        setError(err);\n        setPosts(null);\n      });\n  }, [props.subreddit, requestUrl]);\n  \n  // Loading more posts when scrolled to the bottom of the page\n  useEffect(() => {\n    if (loadingMore && !loadingPosts && lastRequestResult.after) {\n      const after = lastRequestResult.after;\n      axios\n        .get(requestUrl + '?after=' + after)\n        .then(res => {\n          const morePosts = requestResToPosts(res);\n          setUniquePosts(posts && posts.concat(morePosts));\n          setLastRequestResult(res.data.data);\n          setLoadingMore(false);\n        })\n        .catch(() => {\n          setLoadingMore(false);\n        });\n    } else {\n      setLoadingMore(false);\n    }\n  }, [loadingMore, lastRequestResult, loadingPosts, requestUrl, posts]);\n\n  // Setting the scroll event listener \n  useEffect(() => {\n    function handleScroll() {\n      const el = document.getElementById('root');\n      if (!loadingMore && \n          el.getBoundingClientRect().bottom <= window.innerHeight) {\n        setLoadingMore(true);\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [loadingMore]);\n\n  return (\n    <div css={root}>\n      <SubRedditHeader subreddit={props.subreddit} \n        filter={filter} onSelection={setFilter}/>\n      {loadingPosts && <CircularProgress css={bigProgress}/>}\n      <PostsList posts={posts} loadingPosts={loadingPosts}/>\n      {error && !loadingPosts && <ErrorDisplay error={error}/>}\n      {loadingMore && <CircularProgress css={centeredProgress}/>}\n    </div>\n  );\n}\n\nSubReddit.propTypes = {\n  subreddit: PropTypes.string.isRequired\n};\n\nSubReddit.whyDidYouRender = true;\n\nexport default memo(SubReddit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/ArrowRightAlt';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n  title: {\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing.unit,\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing.unit * 9,\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n    width: '100%',\n  },\n  inputInput: {\n    paddingTop: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    paddingLeft: theme.spacing.unit * 10,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n  toolbar: {\n    minHeight: '52px'\n  }\n});\n\nfunction SearchAppBar(props) {\n  const { classes } = props;\n\n  function handleKeyPress(event) {\n    if (event.key === 'Enter') {\n      window.scrollTo(0, 0);\n      props.onSubredditChange(event);\n    }\n  }\n  \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar className={classes.toolbar}>\n          <IconButton onClick={props.onMenuClick} \n            className={classes.menuButton} \n            color=\"inherit\" aria-label=\"Open drawer\">\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} \n            variant=\"h6\" color=\"inherit\" noWrap>\n            React Reddit Client\n          </Typography>\n          <div className={classes.grow} />\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Go to subreddit\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              onKeyPress={handleKeyPress}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nSearchAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onSubredditChange: PropTypes.func.isRequired,\n  onMenuClick: PropTypes.func.isRequired,\n};\n\nSearchAppBar.whyDidYouRender = true;\n\nexport default withStyles(styles)(SearchAppBar);\n","import React from 'react';\nimport { Dialog, DialogTitle, DialogContent, \n  DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { githubLink } from '../../consts';\n\n\nfunction AboutModal({open, onClose}) {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        About\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Personal project by Orel Kanditan <br/>\n          Made using React, Material UI and Emotion <br/>\n          See the source code on {' '}\n          <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\n            GitHub\n          </a>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nAboutModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nexport default AboutModal;","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport { useState } from \"react\";\nimport { PropTypes } from 'prop-types';\nimport { SwipeableDrawer, List, ListItem, \n  ListItemText, ListItemIcon, Typography, Divider,\n  FormControlLabel, Switch } from '@material-ui/core';\nimport { InvertColors, InvertColorsOff, Info } from '@material-ui/icons';\nimport AboutModal from './AboutModal';\nimport { useExpand } from \"../shared/ExpandProvider\";\n\nconst root = css`\n  width: 250px;\n`;\nconst title = css`\n  margin: 0.5em;\n`;\nconst autoExpandListItem = css`\n  height: 3em;\n`;\nconst formControlLabel = css`\n  .label {\n    font-size: 1rem;\n    margin-left: 8px;\n  }\n`;\n\nfunction AppDrawer({open, onOpen, onClose, onSelection}) {\n  const [aboutOpen, setAboutOpen] = useState(false);\n  const [autoExpand, setAutoExpand] = useExpand();\n\n  function handleExpandSwitch() {\n    onClose();\n    setAutoExpand(!autoExpand);\n  }\n\n  return (\n    <SwipeableDrawer open={open} onClose={onClose} onOpen={onOpen}>\n      <div css={root}>\n        <Typography variant='h5' css={title}>\n          React Reddit Client\n        </Typography>\n        <Divider/>\n        <List>\n          <ListItem button onClick={() => onSelection('light')}>\n            <ListItemIcon><InvertColors/></ListItemIcon>\n            <ListItemText primary='Light theme'/>\n          </ListItem>\n          <ListItem button onClick={() => onSelection('dark')}>\n            <ListItemIcon><InvertColorsOff/></ListItemIcon>\n            <ListItemText primary='Dark theme'/>\n          </ListItem>\n          <ListItem button css={autoExpandListItem}>\n            <FormControlLabel\n              css={formControlLabel}\n              classes={{label: 'label'}}\n              control={\n                <Switch checked={autoExpand} \n                  onChange={handleExpandSwitch} />\n              }\n              label=\"Auto Expand\"/>\n          </ListItem>\n          <ListItem button onClick={() => setAboutOpen(true)}>\n            <ListItemIcon><Info/></ListItemIcon>\n            <ListItemText primary='About'/>\n          </ListItem>\n        </List>\n        <AboutModal open={aboutOpen} onClose={() => setAboutOpen(false)}/>\n      </div>\n    </SwipeableDrawer>\n  );\n}\n\nAppDrawer.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSelection: PropTypes.func.isRequired,\n  onOpen: PropTypes.func.isRequired,\n};\n\nAppDrawer.whyDidYouRender = true;\n\nexport default AppDrawer;","import React, { useState } from 'react';\nimport { PropTypes } from 'prop-types';\nimport AppBar from './AppBar';\nimport AppDrawer from './AppDrawer';\n\nfunction AppBarAndDrawer({onSubredditChange, onSelection}) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  function handleSelection(selected) {\n    setDrawerOpen(false);\n    onSelection(selected);\n  }\n  return (\n    <React.Fragment>\n      <AppBar onSubredditChange={onSubredditChange} \n        onMenuClick={() => setDrawerOpen(true)}/>\n      <AppDrawer open={drawerOpen} \n        onSelection={handleSelection}\n        onOpen={() => setDrawerOpen(true)}\n        onClose={() => setDrawerOpen(false)}/>\n    </React.Fragment>\n  );\n}\n\nAppBarAndDrawer.propTypes = {\n  onSelection: PropTypes.func.isRequired,\n  onSubredditChange: PropTypes.func.isRequired,\n};\n\nAppBarAndDrawer.whyDidYouRender = true;\n\nexport default AppBarAndDrawer;","/** @jsx jsx */\nimport { useState } from 'react';\nimport { Global, jsx, css } from \"@emotion/core\";\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { StylesProvider } from \"@material-ui/styles\";\nimport red from '@material-ui/core/colors/red';\nimport SubReddit from './SubReddit/SubReddit';\nimport AppBarAndDrawer from './App/AppBarAndDrawer';\nimport ExpandProvider from './shared/ExpandProvider';\n\nconst content = css`\n  margin-top: 4.5em;\n`;\nconst scrollbar = css`\n  body::-webkit-scrollbar {\n    width: 0.5em;\n  }\n  body::-webkit-scrollbar-track {\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n    box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\n  }\n  body::-webkit-scrollbar-thumb {\n    background-color: #383838;\n    outline: 1px solid slategrey;\n  }\n`;\n\nconst darkColor = '#181a1b';\nconst defaultVariant = localStorage.getItem('theme') || 'dark';\n\nfunction App() {\n  const [subreddit, setSubreddit] = useState('all');\n  const [themeVariant, setThemeVariant] = useState(defaultVariant);\n\n  function handleSubChange(event) {\n    setSubreddit(event.target.value.trim());\n  }\n\n  function setThemeToLocalStorage(newTheme) {\n    localStorage.setItem('theme', newTheme);\n    setThemeVariant(newTheme);\n  }\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {main: red[800]},\n      secondary: {main: red[300]},\n      type: themeVariant\n    },\n    typography: {\n      useNextVariants: true,\n    },\n  });\n\n  const linkColor = css`\n    a {\n      color: lightblue;\n    }\n  `;\n  const bgColor = themeVariant === 'dark' ? darkColor : 'inherit';\n  const global = css`\n    ${scrollbar}\n    body {\n      margin: 0;\n      background: ${bgColor};\n    }\n    ${themeVariant === 'dark' && linkColor}\n  `;\n\n  return (\n    <StylesProvider injectFirst>\n      <MuiThemeProvider theme={theme}>\n        <Global styles={global}/>\n        <ExpandProvider>\n          <AppBarAndDrawer onSubredditChange={handleSubChange}\n            onSelection={setThemeToLocalStorage}/>\n          <div css={content}>\n            <SubReddit subreddit={subreddit}/>\n          </div>\n        </ExpandProvider>\n      </MuiThemeProvider>\n    </StylesProvider>\n  );\n}\n\nApp.whyDidYouRender = true;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nconst devMode = false;\n\nif (devMode) {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React);\n}\n\nReactDOM.render(<App/>,document.getElementById('root'));\n"],"sourceRoot":""}