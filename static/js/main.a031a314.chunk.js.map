{"version":3,"sources":["components/Post/Votes.jsx","components/Post/TitleAndMetadata.jsx","components/Post/Thumbnail.jsx","components/shared/ExpandProvider.jsx","components/Post/Video.jsx","components/Post/AnimatedHover.jsx","components/Post/PostMedia.jsx","components/Post/Post.jsx","components/Post/PostsList.jsx","consts.js","components/SubReddit/SubRedditHeader.jsx","components/SubReddit/SubReddit.jsx","components/App/AppBar.jsx","components/App/AboutModal.jsx","components/App/AppDrawer.jsx","components/App/AppBarAndDrawer.jsx","components/App.jsx","index.js"],"names":["upvoteColor","downvoteColor","root","css","_templateObject","iconButtonCss","_templateObject2","VoteState","UPVOTE","NO_VOTE","DOWNVOTE","Votes","props","num","_useState","useState","_useState2","Object","slicedToArray","voteState","setVoteState","handleVote","nextState","currentColor","getColorByState","makeButtonCss","desiredButtonState","_templateObject3","concat","upButtonCss","downButtonCss","textCss","_templateObject4","_templateObject5","core_browser_esm","index_es","aria-label","onClick","ExpandLess_default","a","variant","votes","toFixed","ExpandMore_default","TitleAndMetadata_templateObject","title","TitleAndMetadata_templateObject2","TitleAndMetadata","_ref","post","postLink","permalink","href","target","rel","he","decode","subreddit_name_prefixed","thumbnail","Thumbnail_templateObject","Thumbnail","assign","alt","localExpandString","localStorage","getItem","defaultExpand","JSON","parse","ExpandContext","React","createContext","ExpandProvider","children","context","react_default","createElement","Provider","value","useExpand","_useContext","useContext","_useContext2","autoExpand","setAutoExpand","newExpand","setItem","video","Video_templateObject","Video","src","muted","loop","autoPlay","controls","calc","x","y","window","innerHeight","innerWidth","trans","s","AnimatedHover","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","hoverProps","set","web","div","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","sourceImg","PostMedia_templateObject","collapse","PostMedia_templateObject2","collapseContent","PostMedia_templateObject3","text","PostMedia_templateObject4","PostMedia","expanded","hasImage","hasVideo","hasEmbed","hasText","htmlEmbed","Post_AnimatedHover","url","Post_Video","media","reddit_video","fallback_url","dangerouslySetInnerHTML","__html","react_markdown_default","source","selftext","rootCard","Post_templateObject","postSummary","Post_templateObject2","exapndIcon","Post_templateObject3","Post","width","_ref$growIn","growIn","_useExpand","setExpanded","deg","expandIconDirection","Post_templateObject4","handleExpanded","useEffect","hasThumbnail","startsWith","urlWithoutQuery","split","some","ext","endsWith","length","media_embed","content","canExpand","removeWidthIfSmall","replace","in","timeout","Post_Votes","ups","Post_Thumbnail","height","thumbnail_height","Post_TitleAndMetadata","aria-expanded","Post_PostMedia","PostsList","posts","loadingPosts","setWidth","handleResize","addEventListener","removeEventListener","map","Post_Post","key","id","redditUrl","filters","label","githubLink","formControl","SubRedditHeader_templateObject","rowPadding","SubRedditHeader_templateObject2","breakWord","SubRedditHeader_templateObject3","SubRedditHeader","subreddit","filter","onSelection","container","justify","item","xs","sm","md","lg","onChange","e","input","labelWidth","_ref2","SubReddit_templateObject","centeredProgress","SubReddit_templateObject2","bigProgress","SubReddit_templateObject3","ErrorDisplay","gutterBottom","defaultFilter","memo","setPosts","_useState3","_useState4","setLoadingPosts","_useState5","_useState6","lastRequestResult","setLastRequestResult","_useState7","_useState8","error","setError","_useState9","_useState10","loadingMore","setLoadingMore","_useState11","_useState12","setFilter","_filter$split","_filter$split2","filterType","time","requestUrl","requestResToPosts","res","data","obj","setUniquePosts","newPosts","uniqBy","axios","get","then","catch","err","after","morePosts","handleScroll","el","document","getElementById","getBoundingClientRect","bottom","SubReddit_SubRedditHeader","Post_PostsList","SubReddit_ErrorDisplay","withStyles","theme","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","spacing","unit","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","toolbar","minHeight","classes","className","AppBar_default","Toolbar_default","IconButton_default","onMenuClick","Menu_default","Typography_default","noWrap","ArrowRightAlt_default","InputBase_default","placeholder","onKeyPress","event","scrollTo","onSubredditChange","AboutModal","open","onClose","aria-labelledby","aria-describedby","autoFocus","AppDrawer_templateObject","AppDrawer_templateObject2","autoExpandListItem","AppDrawer_templateObject3","formControlLabel","AppDrawer_templateObject4","AppDrawer","onOpen","aboutOpen","setAboutOpen","_useExpand2","button","icons_index_es","primary","control","checked","App_AboutModal","AppBarAndDrawer","drawerOpen","setDrawerOpen","Fragment","App_AppBar","App_AppDrawer","selected","App_templateObject","scrollbar","App_templateObject2","darkColor","defaultVariant","App","setSubreddit","themeVariant","setThemeVariant","createMuiTheme","main","red","secondary","type","typography","useNextVariants","linkColor","App_templateObject3","bgColor","global","App_templateObject4","StylesProvider","injectFirst","core_styles","styles","App_AppBarAndDrawer","newTheme","SubReddit_SubReddit","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.a031a314.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, IconButton } from \"@material-ui/core\";\r\nimport UpVote from \"@material-ui/icons/ExpandLess\";\r\nimport DownVote from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst upvoteColor = \"#FF8b60\";\r\nconst downvoteColor = \"#9494FF\";\r\n\r\nconst root = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  margin: auto 4% auto 0;\r\n`;\r\nconst iconButtonCss = css`\r\n  padding: 7px 0;\r\n  width: 40px;\r\n`;\r\n\r\nconst VoteState = {\r\n  UPVOTE: 1,\r\n  NO_VOTE: 0,\r\n  DOWNVOTE: -1\r\n};\r\n\r\nfunction getColorByState(voteState) {\r\n  switch (voteState) {\r\n  case VoteState.UPVOTE:\r\n    return upvoteColor;\r\n  case VoteState.DOWNVOTE:\r\n    return downvoteColor;\r\n  default:\r\n    return 'inherit';\r\n  }\r\n}\r\n\r\nfunction kFormatter(num) {\r\n  return num > 999 ? \r\n    (num / 1000).toFixed(1) + 'k' \r\n    : num;\r\n}\r\n\r\nfunction Votes(props) {\r\n  const [voteState, setVoteState] = useState(VoteState.NO_VOTE);\r\n\r\n  const handleVote = nextState => () => {\r\n    if (nextState === voteState) setVoteState(VoteState.NO_VOTE);\r\n    else setVoteState(nextState);\r\n  };\r\n\r\n  const currentColor = getColorByState(voteState);\r\n  const makeButtonCss = desiredButtonState => css`\r\n    ${iconButtonCss};\r\n    ${voteState === desiredButtonState && `color: ${currentColor};`}\r\n  `;\r\n  const upButtonCss = makeButtonCss(VoteState.UPVOTE);\r\n  const downButtonCss = makeButtonCss(VoteState.DOWNVOTE);\r\n  const textCss = (voteState === VoteState.NO_VOTE) ? css`` : \r\n    css`\r\n      color: ${currentColor};\r\n    `;\r\n  return (\r\n    <div css={root}>\r\n      <IconButton\r\n        css={upButtonCss} aria-label=\"Upvote\" \r\n        onClick={handleVote(VoteState.UPVOTE)}\r\n      >\r\n        <UpVote />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h5\" css={textCss}>\r\n        {kFormatter(props.votes + voteState)}\r\n      </Typography>\r\n\r\n      <IconButton\r\n        css={downButtonCss} aria-label=\"Downvote\"\r\n        onClick={handleVote(VoteState.DOWNVOTE)}\r\n      >\r\n        <DownVote />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nVotes.propTypes = {\r\n  votes: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Votes;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport {Typography} from '@material-ui/core';\r\nimport he from 'he';\r\n\r\nconst root = css`\r\n  margin: auto 0;\r\n  h4 {\r\n    font-size: 12pt;\r\n  }\r\n`;\r\nconst title = css`\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nfunction TitleAndMetadata({post}) {\r\n  const postLink = `https://www.reddit.com${post.permalink}`;\r\n\r\n  return (\r\n    <div css={root}>\r\n      <Typography variant=\"h5\" css={title}>\r\n        <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {he.decode(post.title)}\r\n        </a>\r\n      </Typography>\r\n      <div>\r\n        <Typography variant='h4'>\r\n          {post.subreddit_name_prefixed}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTitleAndMetadata.propTypes = {\r\n  post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TitleAndMetadata;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst thumbnail = css`\r\n  margin: auto 4% auto 0;\r\n  width: auto;\r\n  max-height: 7em;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 25%;\r\n    height: auto;\r\n    align-self: center;\r\n  }\r\n`;\r\n\r\nfunction Thumbnail(props){\r\n  return (\r\n    <img alt='thumbnail' css={thumbnail} {...props} />\r\n  );\r\n}\r\n\r\nThumbnail.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Thumbnail;","import React, { useState, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst localExpandString = localStorage.getItem('autoExpand');\r\nconst defaultExpand = \r\n  (localExpandString && JSON.parse(localExpandString)) || false;\r\nexport const ExpandContext = React.createContext(defaultExpand);\r\n\r\nexport default function ExpandProvider({children}) {\r\n  const [autoExpand, setAutoExpand] = useState(defaultExpand);\r\n  const context = [autoExpand, setAutoExpand];\r\n\r\n  return (\r\n    <ExpandContext.Provider value={context}>\r\n      {children}\r\n    </ExpandContext.Provider>\r\n  );\r\n}\r\n\r\nExpandProvider.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport function useExpand() {\r\n  const [autoExpand, setAutoExpand] = useContext(ExpandContext);\r\n  const setAutoExpandToLocalStorage = (newExpand) => {\r\n    localStorage.setItem('autoExpand', newExpand);\r\n    setAutoExpand(newExpand);\r\n  };\r\n\r\n  return [autoExpand, setAutoExpandToLocalStorage];\r\n}\r\n\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst video = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n`;\r\n\r\nfunction Video({src}) {\r\n  return (\r\n    <video muted loop autoPlay controls css={video}>\r\n      <source src={src}/>\r\n    </video>\r\n  );\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Video;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst calc = (x, y) => [\r\n  -(y - window.innerHeight / 2) / 20,\r\n  (x - window.innerWidth / 2) / 20,\r\n  1.25\r\n];\r\nconst trans = (x, y, s) => \r\n  `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\nfunction AnimatedHover (props) {\r\n  const [hoverProps, set] = useSpring(() => ({\r\n    xys: [0, 0, 1],\r\n    config: { mass: 3, tension: 400, friction: 40 }\r\n  }));\r\n\r\n  return (\r\n    <animated.div\r\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n      style={{ transform: hoverProps.xys.interpolate(trans) }}\r\n    > \r\n      {props.children}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nAnimatedHover.propTypes = {\r\n  children: PropTypes.object.isRequired\r\n};\r\n\r\nexport default AnimatedHover;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, ExpansionPanel, ExpansionPanelDetails } from \"@material-ui/core\";\r\nimport Markdown from 'react-markdown';\r\nimport he from 'he';\r\nimport Video from './Video';\r\nimport AnimatedHover from './AnimatedHover';\r\n\r\nconst sourceImg = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n  margin: auto 0;\r\n  display: block;\r\n`;\r\nconst collapse = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 0;\r\n`;\r\nconst collapseContent = css`\r\n  padding: 0 2em 1em 2em;  \r\n  @media only screen and (max-width: 768px) {\r\n    padding: 5%;\r\n    padding-top: 0;\r\n  }\r\n`;\r\nconst text = css`\r\n  overflow: auto;\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 85%;\r\n    margin: 0 auto;\r\n  }\r\n  p {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\n// Stateless Component that displays the post media\r\nfunction PostMedia({ post, expanded, hasImage, \r\n  hasVideo, hasEmbed, hasText, htmlEmbed }) {\r\n  \r\n  return (\r\n    <ExpansionPanel expanded={expanded}>\r\n      <ExpansionPanelDetails css={collapse}>\r\n        <div css={collapseContent}>\r\n          {hasImage && \r\n            <AnimatedHover>\r\n              <img src={post.url} alt='source' css={sourceImg}/>\r\n            </AnimatedHover>}\r\n          {hasVideo && <Video src={post.media.reddit_video.fallback_url}/>}\r\n          {hasEmbed && \r\n            <div dangerouslySetInnerHTML={{__html: htmlEmbed}}/>}\r\n          {hasText && \r\n            <Typography variant='h5' css={text}>\r\n              <Markdown source={he.decode(post.selftext)}/>\r\n            </Typography>}\r\n        </div>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n  );\r\n}\r\n\r\nPostMedia.propTypes = {\r\n  expanded: PropTypes.bool.isRequired,\r\n  hasEmbed: PropTypes.any,\r\n  hasImage: PropTypes.any,\r\n  hasText: PropTypes.any,\r\n  hasVideo: PropTypes.any,\r\n  htmlEmbed: PropTypes.any,\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default PostMedia;","/** @jsx jsx */\r\nimport { useState, useEffect } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, IconButton, Grow } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport he from 'he';\r\nimport Votes from \"./Votes\";\r\nimport TitleAndMetadata from \"./TitleAndMetadata\";\r\nimport Thumbnail from './Thumbnail';\r\nimport { useExpand } from '../shared/ExpandProvider';\r\nimport PostMedia from './PostMedia';\r\n\r\nconst rootCard = css`\r\n  min-width: 275px;\r\n  margin: 1em auto;\r\n  h5 {\r\n    font-size: 13pt;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\nconst postSummary = css`\r\n  display: flex;\r\n  padding: 1em 3%;\r\n`;\r\nconst exapndIcon = css`\r\n  height: fit-content;\r\n  margin: auto 0 auto auto;\r\n  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n`;\r\n\r\nfunction Post({ post, width, growIn = true}) {\r\n  const [autoExpand] = useExpand();\r\n  const [expanded, setExpanded] = useState(autoExpand);\r\n\r\n  const deg = expanded ? 180 : 0;\r\n  const expandIconDirection = css`\r\n    transform: rotate(${deg}deg);\r\n  `;\r\n\r\n  const handleExpanded = () => setExpanded(!expanded);\r\n\r\n  // Change Post expansion when auto expand chnages\r\n  useEffect(() => {\r\n    setExpanded(autoExpand);\r\n  }, [autoExpand]);\r\n\r\n  // Different media logic\r\n  const hasThumbnail = post.thumbnail.startsWith('http');\r\n  const urlWithoutQuery = post.url.split('?')[0];\r\n  const hasImage = ['.jpg', '.jpeg', '.gif', '.png']\r\n    .some(ext => urlWithoutQuery.endsWith(ext));\r\n  const hasText = post.selftext && (post.selftext.length > 0);\r\n  const hasVideo = post.media && post.media.reddit_video && \r\n    post.media.reddit_video.fallback_url;\r\n  const hasEmbed = post.media_embed && post.media_embed.content;\r\n  const canExpand = (hasImage || hasText || hasVideo || hasEmbed);\r\n  \r\n  // If it's a small screen, removes width and height from the media embed\r\n  const removeWidthIfSmall = hasEmbed && \r\n    width <= 768 ? \r\n    post.media_embed.content.replace(/width=\"[0-9]+\"/, '')\r\n      .replace(/height=\"[0-9]+\"/, '') :\r\n    post.media_embed.content;\r\n  const htmlEmbed = hasEmbed && he.decode(removeWidthIfSmall);\r\n\r\n  return (\r\n    <Grow in={growIn} timeout={500}>\r\n      <Card css={rootCard}>\r\n        <div css={postSummary}>\r\n          <Votes votes={post.ups} />\r\n          {hasThumbnail && \r\n          <Thumbnail src={post.thumbnail} \r\n            height={post.thumbnail_height} onClick={handleExpanded}/>}\r\n          <TitleAndMetadata post={post}/>\r\n          {canExpand && \r\n          <IconButton css={[exapndIcon, expandIconDirection]} \r\n            onClick={handleExpanded} aria-expanded={expanded}>\r\n            <ExpandMoreIcon/>\r\n          </IconButton>}\r\n        </div>\r\n        {canExpand && \r\n        <PostMedia post={post} expanded={expanded} htmlEmbed={htmlEmbed}\r\n          hasEmbed={hasEmbed} hasImage={hasImage} \r\n          hasText={hasText} hasVideo={hasVideo} />}\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  growIn: PropTypes.bool,\r\n  width: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;\r\n","/** @jsx jsx */\r\nimport { useState, useEffect } from 'react';\r\nimport { jsx } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport Post from './Post';\r\n\r\nfunction PostsList({ posts, loadingPosts }) {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n\r\n  // Window width listener\r\n  useEffect(() => {\r\n    const handleResize = () => setWidth(window.innerWidth);\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    posts && posts.map(post => \r\n      <Post post={post} key={post.id} growIn={!loadingPosts} width={width}/>)\r\n  );\r\n}\r\n\r\nPostsList.propTypes = {\r\n  loadingPosts: PropTypes.bool.isRequired,\r\n  posts: PropTypes.array,\r\n};\r\n\r\nexport default PostsList;","export const redditUrl = 'https://www.reddit.com';\r\n\r\nexport const filters = [\r\n  {label: 'Hot', value: 'hot'},\r\n  {label: 'Top Hour', value: 'top hour'},\r\n  {label: 'Top Day', value: 'top day'},\r\n  {label: 'Top Week', value: 'top week'},\r\n  {label: 'Top Month', value: 'top month'},\r\n  {label: 'Top All Time', value: 'top all'},\r\n  {label: 'New', value: 'new'},\r\n  {label: 'Best', value: 'best'},\r\n  {label: 'Controversial', value: 'controversial'},\r\n];\r\n\r\nexport const githubLink = 'https://github.com/orelkan/react-reddit-client';","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, FormControl, InputLabel,\r\n  Select, OutlinedInput, MenuItem, Grid } from \"@material-ui/core\";\r\nimport { filters } from '../../consts';\r\n\r\nconst formControl = css`\r\n  min-width: 120px;\r\n`;\r\nconst rowPadding = css`\r\n  @media only screen and (max-width: 768px) {\r\n    padding-bottom: 1em;\r\n  }\r\n`;\r\nconst breakWord = css`\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nfunction SubRedditHeader({ subreddit, filter, onSelection }) {\r\n  return (\r\n    <Grid container justify=\"space-between\">\r\n      <Grid item xs={12} sm={6} md={6} lg={6} css={rowPadding}>\r\n        <Typography variant=\"h2\" css={breakWord}>\r\n          {`/r/${subreddit}`}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl variant=\"outlined\" css={formControl}>\r\n          <InputLabel>Order</InputLabel>\r\n          <Select\r\n            value={filter}\r\n            onChange={e => onSelection(e.target.value)}\r\n            input={\r\n              <OutlinedInput labelWidth={43}/>\r\n            }\r\n          >\r\n            {filters.map(({ label, value }) => \r\n              <MenuItem key={value} value={value}>{label}</MenuItem>\r\n            )}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid> \r\n    </Grid>\r\n  );\r\n}\r\n\r\nSubRedditHeader.propTypes = {\r\n  subreddit: PropTypes.string.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SubRedditHeader;","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { uniqBy } from 'lodash';\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport PostsList from \"../Post/PostsList\";\r\nimport { redditUrl } from '../../consts';\r\nimport SubRedditHeader from './SubRedditHeader';\r\n\r\nconst root = css`\r\n  margin: 2em 7%;\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 2em 4%;\r\n  }\r\n`;\r\nconst centeredProgress = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: auto;\r\n`;\r\nconst bigProgress = css`\r\n  ${centeredProgress};\r\n  width: 8em !important;\r\n  height: 8em !important;\r\n  margin-top: 3em;\r\n`;\r\n\r\nconst ErrorDisplay = () => (\r\n  <Typography variant=\"h3\" gutterBottom>\r\n    No such Subreddit\r\n  </Typography>\r\n);\r\n\r\nconst defaultFilter = 'hot';\r\n\r\nfunction SubReddit(props) {\r\n  const [posts, setPosts] = useState(null);\r\n  const [loadingPosts, setLoadingPosts] = useState(false);\r\n  const [lastRequestResult, setLastRequestResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [filter, setFilter] = useState(defaultFilter);\r\n\r\n  // If the filter has a time aspect it will be seperated by space\r\n  // example: 'top hour'\r\n  const [filterType, time] = filter.split(' ');\r\n  const requestUrl = `${redditUrl}/r/${props.subreddit}/${filterType}.json` + \r\n  ((time) ? `?t=${time}` : '');\r\n  // Transform the raw data by extracting the nested posts\r\n  const requestResToPosts = res => res.data.data.children.map(obj => obj.data);\r\n  const setUniquePosts = newPosts => setPosts(uniqBy(newPosts, 'id'));\r\n\r\n  // Loading posts on subreddit or filter change\r\n  useEffect(() => {\r\n    setLoadingPosts(true);\r\n    axios\r\n      .get(requestUrl)\r\n      .then(res => {\r\n        const newPosts = requestResToPosts(res);\r\n        setLoadingPosts(false);\r\n        setLastRequestResult(res.data.data);\r\n        setError(null);\r\n        setUniquePosts(newPosts);\r\n      })\r\n      .catch(err => {\r\n        setLoadingPosts(false);\r\n        setError(err);\r\n        setPosts(null);\r\n      });\r\n  }, [props.subreddit, requestUrl]);\r\n  \r\n  // Loading more posts when scrolled to the bottom of the page\r\n  useEffect(() => {\r\n    if (loadingMore && !loadingPosts && lastRequestResult.after) {\r\n      const after = lastRequestResult.after;\r\n      axios\r\n        .get(requestUrl + '?after=' + after)\r\n        .then(res => {\r\n          const morePosts = requestResToPosts(res);\r\n          setUniquePosts(posts && posts.concat(morePosts));\r\n          setLastRequestResult(res.data.data);\r\n          setLoadingMore(false);\r\n        })\r\n        .catch(() => {\r\n          setLoadingMore(false);\r\n        });\r\n    } else {\r\n      setLoadingMore(false);\r\n    }\r\n  }, [loadingMore, lastRequestResult, loadingPosts, requestUrl, posts]);\r\n\r\n  // Setting the scroll event listener \r\n  useEffect(() => {\r\n    function handleScroll() {\r\n      const el = document.getElementById('root');\r\n      if (!loadingMore && \r\n          el.getBoundingClientRect().bottom <= window.innerHeight) {\r\n        setLoadingMore(true);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [loadingMore]);\r\n\r\n  return (\r\n    <div css={root}>\r\n      <SubRedditHeader subreddit={props.subreddit} \r\n        filter={filter} onSelection={setFilter}/>\r\n      {loadingPosts && <CircularProgress css={bigProgress}/>}\r\n      <PostsList posts={posts} loadingPosts={loadingPosts}/>\r\n      {error && !loadingPosts && <ErrorDisplay/>}\r\n      {loadingMore && <CircularProgress css={centeredProgress}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nSubReddit.propTypes = {\r\n  subreddit: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(SubReddit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/ArrowRightAlt';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 120,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n  toolbar: {\r\n    minHeight: '52px'\r\n  }\r\n});\r\n\r\nfunction SearchAppBar(props) {\r\n  const { classes } = props;\r\n\r\n  function handleKeyPress(event) {\r\n    if (event.key === 'Enter') {\r\n      window.scrollTo(0, 0);\r\n      props.onSubredditChange(event);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton onClick={props.onMenuClick} \r\n            className={classes.menuButton} \r\n            color=\"inherit\" aria-label=\"Open drawer\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} \r\n            variant=\"h6\" color=\"inherit\" noWrap>\r\n            React Reddit Client\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Go to subreddit\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n  onMenuClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SearchAppBar);\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, \r\n  DialogContentText, DialogActions, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { githubLink } from '../../consts';\r\n\r\n\r\nfunction AboutModal({open, onClose}) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        About\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Personal project by Orel Kanditan <br/>\r\n          Made using React, Material UI and Emotion <br/>\r\n          See the source code on {' '}\r\n          <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            GitHub\r\n          </a>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" autoFocus>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAboutModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default AboutModal;","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport { PropTypes } from 'prop-types';\r\nimport { SwipeableDrawer, List, ListItem, \r\n  ListItemText, ListItemIcon, Typography, Divider,\r\n  FormControlLabel, Switch } from '@material-ui/core';\r\nimport { InvertColors, InvertColorsOff, Info } from '@material-ui/icons';\r\nimport AboutModal from './AboutModal';\r\nimport { useExpand } from \"../shared/ExpandProvider\";\r\n\r\nconst root = css`\r\n  width: 250px;\r\n`;\r\nconst title = css`\r\n  margin: 0.5em;\r\n`;\r\nconst autoExpandListItem = css`\r\n  height: 3em;\r\n`;\r\nconst formControlLabel = css`\r\n  .label {\r\n    font-size: 1rem;\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nfunction AppDrawer({open, onOpen, onClose, onSelection}) {\r\n  const [aboutOpen, setAboutOpen] = useState(false);\r\n  const [autoExpand, setAutoExpand] = useExpand();\r\n\r\n  function handleExpandSwitch() {\r\n    onClose();\r\n    setAutoExpand(!autoExpand);\r\n  }\r\n\r\n  return (\r\n    <SwipeableDrawer open={open} onClose={onClose} onOpen={onOpen}>\r\n      <div css={root}>\r\n        <Typography variant='h5' css={title}>\r\n          React Reddit Client\r\n        </Typography>\r\n        <Divider/>\r\n        <List>\r\n          <ListItem button onClick={() => onSelection('light')}>\r\n            <ListItemIcon><InvertColors/></ListItemIcon>\r\n            <ListItemText primary='Light theme'/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => onSelection('dark')}>\r\n            <ListItemIcon><InvertColorsOff/></ListItemIcon>\r\n            <ListItemText primary='Dark theme'/>\r\n          </ListItem>\r\n          <ListItem button css={autoExpandListItem}>\r\n            <FormControlLabel\r\n              css={formControlLabel}\r\n              classes={{label: 'label'}}\r\n              control={\r\n                <Switch checked={autoExpand} \r\n                  onChange={handleExpandSwitch} />\r\n              }\r\n              label=\"Auto Expand\"/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => setAboutOpen(true)}>\r\n            <ListItemIcon><Info/></ListItemIcon>\r\n            <ListItemText primary='About'/>\r\n          </ListItem>\r\n        </List>\r\n        <AboutModal open={aboutOpen} onClose={() => setAboutOpen(false)}/>\r\n      </div>\r\n    </SwipeableDrawer>\r\n  );\r\n}\r\n\r\nAppDrawer.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n  onOpen: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppDrawer;","import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport AppBar from './AppBar';\r\nimport AppDrawer from './AppDrawer';\r\n\r\nfunction AppBarAndDrawer({onSubredditChange, onSelection}) {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  function handleSelection(selected) {\r\n    setDrawerOpen(false);\r\n    onSelection(selected);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar onSubredditChange={onSubredditChange} \r\n        onMenuClick={() => setDrawerOpen(true)}/>\r\n      <AppDrawer open={drawerOpen} \r\n        onSelection={handleSelection}\r\n        onOpen={() => setDrawerOpen(true)}\r\n        onClose={() => setDrawerOpen(false)}/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAppBarAndDrawer.propTypes = {\r\n  onSelection: PropTypes.func.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppBarAndDrawer;","/** @jsx jsx */\r\nimport { useState } from 'react';\r\nimport { Global, jsx, css } from \"@emotion/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport SubReddit from './SubReddit/SubReddit';\r\nimport AppBarAndDrawer from './App/AppBarAndDrawer';\r\nimport ExpandProvider from './shared/ExpandProvider';\r\n\r\nconst content = css`\r\n  margin-top: 4.5em;\r\n`;\r\nconst scrollbar = css`\r\n  body::-webkit-scrollbar {\r\n    width: 0.5em;\r\n  }\r\n  body::-webkit-scrollbar-track {\r\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n    box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n  }\r\n  body::-webkit-scrollbar-thumb {\r\n    background-color: #383838;\r\n    outline: 1px solid slategrey;\r\n  }\r\n`;\r\n\r\nconst darkColor = '#181a1b';\r\nconst defaultVariant = localStorage.getItem('theme') || 'dark';\r\n\r\nfunction App() {\r\n  const [subreddit, setSubreddit] = useState('all');\r\n  const [themeVariant, setThemeVariant] = useState(defaultVariant);\r\n\r\n  function handleSubChange(event) {\r\n    setSubreddit(event.target.value);\r\n  }\r\n\r\n  function setThemeToLocalStorage(newTheme) {\r\n    localStorage.setItem('theme', newTheme);\r\n    setThemeVariant(newTheme);\r\n  }\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {main: red[800]},\r\n      secondary: {main: red[300]},\r\n      type: themeVariant\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\n\r\n  const linkColor = css`\r\n    a {\r\n      color: lightblue;\r\n    }\r\n  `;\r\n  const bgColor = themeVariant === 'dark' ? darkColor : 'inherit';\r\n  const global = css`\r\n    ${scrollbar}\r\n    body {\r\n      margin: 0;\r\n      background: ${bgColor};\r\n    }\r\n    ${themeVariant === 'dark' && linkColor}\r\n  `;\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Global styles={global}/>\r\n        <ExpandProvider>\r\n          <AppBarAndDrawer onSubredditChange={handleSubChange} \r\n            onSelection={setThemeToLocalStorage}/>\r\n          <div css={content}>\r\n            <SubReddit subreddit={subreddit}/>\r\n          </div>\r\n        </ExpandProvider>\r\n      </MuiThemeProvider>\r\n    </StylesProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}