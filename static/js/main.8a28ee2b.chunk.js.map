{"version":3,"sources":["components/Post/Votes.jsx","components/Post/TitleAndMetadata.jsx","components/Post/Thumbnail.jsx","components/Post/Video.jsx","components/Post/AnimatedHover.jsx","components/shared/ExpandProvider.jsx","components/Post/Post.jsx","consts.js","components/SubReddit/SubRedditHeader.jsx","components/SubReddit/SubReddit.jsx","components/App/AppBar.jsx","components/App/AboutModal.jsx","components/App/AppDrawer.jsx","components/App/AppBarAndDrawer.jsx","components/App.jsx","index.js"],"names":["upvoteColor","downvoteColor","root","css","_templateObject","iconButtonCss","_templateObject2","VoteState","UPVOTE","NO_VOTE","DOWNVOTE","Votes","props","num","_useState","useState","_useState2","Object","slicedToArray","voteState","setVoteState","handleVote","nextState","currentColor","getColorByState","makeButtonCss","desiredButtonState","_templateObject3","concat","upButtonCss","downButtonCss","textCss","_templateObject4","_templateObject5","core_browser_esm","index_es","aria-label","onClick","ExpandLess_default","a","variant","votes","toFixed","ExpandMore_default","TitleAndMetadata_templateObject","title","TitleAndMetadata_templateObject2","TitleAndMetadata","_ref","post","postLink","permalink","href","target","rel","he","decode","subreddit_name_prefixed","thumbnail","Thumbnail_templateObject","Thumbnail","assign","alt","video","Video_templateObject","Video","src","muted","loop","autoPlay","controls","calc","x","y","window","innerHeight","innerWidth","trans","s","AnimatedHover","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","hoverProps","set","react_default","createElement","web","div","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","children","defaultExpand","ExpandContext","React","createContext","ExpandProvider","context","Provider","value","useExpand","_useContext","useContext","_useContext2","card","Post_templateObject","cardContent","Post_templateObject2","sourceImg","Post_templateObject3","exapnd","Post_templateObject4","collapse","Post_templateObject5","collapseContent","_templateObject6","text","_templateObject7","Post","_ref$growIn","growIn","_useExpand","autoExpand","expanded","setExpanded","_useState3","_useState4","width","setWidth","handleExpanded","useEffect","handleResize","addEventListener","removeEventListener","hasThumbnail","startsWith","urlWithoutQuery","url","split","hasImage","some","ext","endsWith","hasText","selftext","length","hasVideo","media","reddit_video","fallback_url","hasEmbed","media_embed","content","canExpand","removeWidthIfSmall","replace","htmlEmbed","in","timeout","Post_Votes","ups","Post_Thumbnail","height","thumbnail_height","Post_TitleAndMetadata","aria-expanded","unmountOnExit","Post_AnimatedHover","Post_Video","dangerouslySetInnerHTML","__html","react_markdown_default","source","redditUrl","filters","label","githubLink","formControl","SubRedditHeader_templateObject","rowPadding","SubRedditHeader_templateObject2","breakWord","SubRedditHeader_templateObject3","SubRedditHeader","subreddit","filter","onSelection","container","spacing","justify","item","xs","sm","md","lg","onChange","e","input","labelWidth","map","_ref2","key","SubReddit_templateObject","centeredProgress","SubReddit_templateObject2","bigProgress","SubReddit_templateObject3","ErrorDisplay","gutterBottom","defaultFilter","memo","posts","setPosts","loadingPosts","setLoadingPosts","_useState5","_useState6","lastRequestResult","setLastRequestResult","_useState7","_useState8","error","setError","_useState9","_useState10","loadingMore","setLoadingMore","_useState11","_useState12","setFilter","_filter$split","_filter$split2","filterType","time","requestUrl","requestResToPosts","res","data","obj","axios","get","then","catch","err","after","morePosts","prevPosts","handleScroll","el","document","getElementById","getBoundingClientRect","bottom","SubReddit_SubRedditHeader","Post_Post","id","SubReddit_ErrorDisplay","withStyles","theme","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","unit","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","classes","className","AppBar_default","Toolbar_default","IconButton_default","onMenuClick","Menu_default","Typography_default","noWrap","ArrowRightAlt_default","InputBase_default","placeholder","onKeyPress","event","scrollTo","onSubredditChange","AboutModal","open","onClose","aria-labelledby","aria-describedby","autoFocus","AppDrawer_templateObject","AppDrawer_templateObject2","autoExpandListItem","AppDrawer_templateObject3","formControlLabel","AppDrawer_templateObject4","AppDrawer","onOpen","aboutOpen","setAboutOpen","_useExpand2","setAutoExpand","button","icons_index_es","primary","control","checked","App_AboutModal","AppBarAndDrawer","drawerOpen","setDrawerOpen","Fragment","App_AppBar","App_AppDrawer","selected","App_templateObject","scrollbar","App_templateObject2","darkColor","defaultVariant","App","setSubreddit","themeVariant","setThemeVariant","createMuiTheme","main","red","secondary","type","typography","useNextVariants","linkColor","App_templateObject3","bgColor","global","App_templateObject4","StylesProvider","injectFirst","core_styles","styles","App_AppBarAndDrawer","SubReddit_SubReddit","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.8a28ee2b.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, IconButton } from \"@material-ui/core\";\r\nimport UpVote from \"@material-ui/icons/ExpandLess\";\r\nimport DownVote from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst upvoteColor = \"#FF8b60\";\r\nconst downvoteColor = \"#9494FF\";\r\n\r\nconst root = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  margin: auto 4% auto 0;\r\n`;\r\nconst iconButtonCss = css`\r\n  padding: 7px 0;\r\n  width: 40px;\r\n`;\r\n\r\nconst VoteState = {\r\n  UPVOTE: 1,\r\n  NO_VOTE: 0,\r\n  DOWNVOTE: -1\r\n};\r\n\r\nfunction getColorByState(voteState) {\r\n  switch (voteState) {\r\n  case VoteState.UPVOTE:\r\n    return upvoteColor;\r\n  case VoteState.DOWNVOTE:\r\n    return downvoteColor;\r\n  default:\r\n    return 'inherit';\r\n  }\r\n}\r\n\r\nfunction kFormatter(num) {\r\n  return num > 999 ? \r\n    (num / 1000).toFixed(1) + 'k' \r\n    : num;\r\n}\r\n\r\nfunction Votes(props) {\r\n  const [voteState, setVoteState] = useState(VoteState.NO_VOTE);\r\n\r\n  const handleVote = nextState => () => {\r\n    if (nextState === voteState) setVoteState(VoteState.NO_VOTE);\r\n    else setVoteState(nextState);\r\n  };\r\n\r\n  const currentColor = getColorByState(voteState);\r\n  const makeButtonCss = desiredButtonState => css`\r\n    ${iconButtonCss};\r\n    ${voteState === desiredButtonState && `color: ${currentColor};`}\r\n  `;\r\n  const upButtonCss = makeButtonCss(VoteState.UPVOTE);\r\n  const downButtonCss = makeButtonCss(VoteState.DOWNVOTE);\r\n  const textCss = (voteState === VoteState.NO_VOTE) ? css`` : \r\n    css`\r\n      color: ${currentColor};\r\n    `;\r\n  return (\r\n    <div css={root}>\r\n      <IconButton\r\n        css={upButtonCss} aria-label=\"Upvote\" \r\n        onClick={handleVote(VoteState.UPVOTE)}\r\n      >\r\n        <UpVote />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h5\" css={textCss}>\r\n        {kFormatter(props.votes + voteState)}\r\n      </Typography>\r\n\r\n      <IconButton\r\n        css={downButtonCss} aria-label=\"Downvote\"\r\n        onClick={handleVote(VoteState.DOWNVOTE)}\r\n      >\r\n        <DownVote />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nVotes.propTypes = {\r\n  votes: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Votes;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport {Typography} from '@material-ui/core';\r\nimport he from 'he';\r\n\r\nconst root = css`\r\n  margin: auto 0;\r\n  h4 {\r\n    font-size: 12pt;\r\n  }\r\n`;\r\nconst title = css`\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nfunction TitleAndMetadata({post}) {\r\n  const postLink = `https://www.reddit.com${post.permalink}`;\r\n\r\n  return (\r\n    <div css={root}>\r\n      <Typography variant=\"h5\" css={title}>\r\n        <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {he.decode(post.title)}\r\n        </a>\r\n      </Typography>\r\n      <div>\r\n        <Typography variant='h4'>\r\n          {post.subreddit_name_prefixed}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTitleAndMetadata.propTypes = {\r\n  post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TitleAndMetadata;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst thumbnail = css`\r\n  margin: auto 4% auto 0;\r\n  width: auto;\r\n  max-height: 7em;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 25%;\r\n    height: auto;\r\n    align-self: center;\r\n  }\r\n`;\r\n\r\nfunction Thumbnail(props){\r\n  return (\r\n    <img alt='thumbnail' css={thumbnail} {...props} />\r\n  );\r\n}\r\n\r\nThumbnail.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Thumbnail;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst video = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n`;\r\n\r\nfunction Video({src}) {\r\n  return (\r\n    <video muted loop autoPlay controls css={video}>\r\n      <source src={src}/>\r\n    </video>\r\n  );\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Video;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst calc = (x, y) => [\r\n  -(y - window.innerHeight / 2) / 20,\r\n  (x - window.innerWidth / 2) / 20,\r\n  1.25\r\n];\r\nconst trans = (x, y, s) => \r\n  `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\nfunction AnimatedHover (props) {\r\n  const [hoverProps, set] = useSpring(() => ({\r\n    xys: [0, 0, 1],\r\n    config: { mass: 3, tension: 400, friction: 40 }\r\n  }));\r\n\r\n  return (\r\n    <animated.div\r\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n      style={{ transform: hoverProps.xys.interpolate(trans) }}\r\n    > \r\n      {props.children}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nAnimatedHover.propTypes = {\r\n  children: PropTypes.object.isRequired\r\n};\r\n\r\nexport default AnimatedHover;","import React, { useState, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst defaultExpand = false;\r\nexport const ExpandContext = React.createContext(defaultExpand);\r\n\r\nexport default function ExpandProvider({children}) {\r\n  const [autoExpand, setAutoExpand] = useState(defaultExpand);\r\n  const context = [autoExpand, setAutoExpand];\r\n\r\n  return (\r\n    <ExpandContext.Provider value={context}>\r\n      {children}\r\n    </ExpandContext.Provider>\r\n  );\r\n}\r\n\r\nExpandProvider.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport function useExpand() {\r\n  const [autoExpand, setAutoExpand] = useContext(ExpandContext);\r\n  return [autoExpand, setAutoExpand];\r\n}\r\n\r\n","/** @jsx jsx */\r\nimport { useState, useEffect } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Typography, IconButton, Collapse, Grow } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Markdown from 'react-markdown';\r\nimport he from 'he';\r\nimport Votes from \"./Votes\";\r\nimport TitleAndMetadata from \"./TitleAndMetadata\";\r\nimport Thumbnail from './Thumbnail';\r\nimport Video from './Video';\r\nimport AnimatedHover from './AnimatedHover';\r\nimport { useExpand } from '../shared/ExpandProvider';\r\n\r\nconst card = css`\r\n  min-width: 275px;\r\n  margin: 1em auto;\r\n  h5 {\r\n    font-size: 13pt;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\nconst cardContent = css`\r\n  display: flex;\r\n  padding: 1em 3%;\r\n`;\r\nconst sourceImg = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n  margin: auto 0;\r\n  display: block;\r\n`;\r\nconst exapnd = css`\r\n  height: fit-content;\r\n  margin: auto 0 auto auto;\r\n`;\r\nconst collapse = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nconst collapseContent = css`\r\n  padding: 0 2em 1em 2em;  \r\n  @media only screen and (max-width: 768px) {\r\n    padding: 5%;\r\n    padding-top: 0;\r\n  }\r\n`;\r\nconst text = css`\r\n  overflow: auto;\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 85%;\r\n    margin: 0 auto;\r\n  }\r\n  p {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\nfunction Post({ post, growIn = true}) {\r\n  const [autoExpand] = useExpand();\r\n  const [expanded, setExpanded] = useState(autoExpand);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const handleExpanded = () => setExpanded(!expanded);\r\n  \r\n  // Change Post expansion when auto expand chnages\r\n  useEffect(() => {\r\n    setExpanded(autoExpand);\r\n  }, [autoExpand]);\r\n\r\n  // Window width listener\r\n  useEffect(() => {\r\n    const handleResize = () => setWidth(window.innerWidth);\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const hasThumbnail = post.thumbnail.startsWith('http');\r\n  const urlWithoutQuery = post.url.split('?')[0];\r\n  const hasImage = ['.jpg', '.jpeg', '.gif', '.png']\r\n    .some(ext => urlWithoutQuery.endsWith(ext));\r\n  const hasText = post.selftext && post.selftext.length > 0;\r\n  const hasVideo = post.media && post.media.reddit_video && \r\n    post.media.reddit_video.fallback_url;\r\n  const hasEmbed = post.media_embed && post.media_embed.content;\r\n  const canExpand = (hasImage || hasText || hasVideo || hasEmbed);\r\n  \r\n  // If it's a small screen, removes width and height from the media embed\r\n  const removeWidthIfSmall = hasEmbed && \r\n    width <= 768 ? \r\n    post.media_embed.content.replace(/width=\"[0-9]+\"/, '')\r\n      .replace(/height=\"[0-9]+\"/, '') :\r\n    post.media_embed.content;\r\n  const htmlEmbed = hasEmbed && he.decode(removeWidthIfSmall);\r\n\r\n  return (\r\n    <Grow in={growIn} timeout={500}>\r\n      <Card css={card}>\r\n        <div css={cardContent}>\r\n          <Votes votes={post.ups} />\r\n          {hasThumbnail && \r\n          <Thumbnail src={post.thumbnail} \r\n            height={post.thumbnail_height} onClick={handleExpanded}/>}\r\n          <TitleAndMetadata post={post}/>\r\n          {canExpand && \r\n          <IconButton css={exapnd} onClick={handleExpanded} aria-expanded={expanded}>\r\n            <ExpandMoreIcon/>\r\n          </IconButton>}\r\n        </div>\r\n        {canExpand && \r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit css={collapse}>\r\n          <div css={collapseContent}>\r\n            {hasImage && \r\n            <AnimatedHover>\r\n              <img src={post.url} alt='source' css={sourceImg}/>\r\n            </AnimatedHover>}\r\n            {hasVideo && <Video src={post.media.reddit_video.fallback_url}/>}\r\n            {hasEmbed && \r\n            <div dangerouslySetInnerHTML={{__html: htmlEmbed}}/>}\r\n            {hasText && \r\n            <Typography variant='h5' css={text}>\r\n              <Markdown source={he.decode(post.selftext)}/>\r\n            </Typography>}\r\n          </div>\r\n        </Collapse>}\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  growIn: PropTypes.bool,\r\n};\r\n\r\nexport default Post;\r\n","export const redditUrl = 'https://www.reddit.com';\r\n\r\nexport const filters = [\r\n  {label: 'Hot', value: 'hot'},\r\n  {label: 'Top Hour', value: 'top hour'},\r\n  {label: 'Top Day', value: 'top day'},\r\n  {label: 'Top Week', value: 'top week'},\r\n  {label: 'Top Month', value: 'top month'},\r\n  {label: 'Top All Time', value: 'top all'},\r\n  {label: 'New', value: 'new'},\r\n  {label: 'Best', value: 'best'},\r\n  {label: 'Controversial', value: 'controversial'},\r\n];\r\n\r\nexport const githubLink = 'https://github.com/orelkan/react-reddit-client';","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, FormControl, InputLabel,\r\n  Select, OutlinedInput, MenuItem, Grid } from \"@material-ui/core\";\r\nimport { filters } from '../../consts';\r\n\r\nconst formControl = css`\r\n  min-width: 120px;\r\n`;\r\nconst rowPadding = css`\r\n  @media only screen and (max-width: 768px) {\r\n    padding-bottom: 1em;\r\n  }\r\n`;\r\nconst breakWord = css`\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nfunction SubRedditHeader({subreddit, filter, onSelection}) {\r\n  return (\r\n    <Grid container spacing={3} justify=\"space-between\">\r\n      <Grid item xs={12} sm={6} md={6} lg={6} css={rowPadding}>\r\n        <Typography variant=\"h2\" css={breakWord}>\r\n          {`/r/${subreddit}`}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl variant=\"outlined\" css={formControl}>\r\n          <InputLabel>Order</InputLabel>\r\n          <Select\r\n            value={filter}\r\n            onChange={e => onSelection(e.target.value)}\r\n            input={\r\n              <OutlinedInput labelWidth={43}/>\r\n            }\r\n          >\r\n            {filters.map(({label, value}) => \r\n              <MenuItem key={value} value={value}>{label}</MenuItem>\r\n            )}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid> \r\n    </Grid>\r\n  );\r\n}\r\n\r\nSubRedditHeader.propTypes = {\r\n  subreddit: PropTypes.string.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SubRedditHeader;","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport Post from \"../Post/Post\";\r\nimport { redditUrl } from '../../consts';\r\nimport SubRedditHeader from './SubRedditHeader';\r\n\r\nconst root = css`\r\n  margin: 2em 7%;\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 2em 4%;\r\n  }\r\n`;\r\nconst centeredProgress = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: auto;\r\n`;\r\nconst bigProgress = css`\r\n  ${centeredProgress};\r\n  width: 8em !important;\r\n  height: 8em !important;\r\n  margin-top: 3em;\r\n`;\r\n\r\nconst ErrorDisplay = () => (\r\n  <Typography variant=\"h3\" gutterBottom>\r\n    No such Subreddit\r\n  </Typography>\r\n);\r\n\r\nconst defaultFilter = 'hot';\r\n\r\nfunction SubReddit(props) {\r\n  const [posts, setPosts] = useState(null);\r\n  const [loadingPosts, setLoadingPosts] = useState(false);\r\n  const [lastRequestResult, setLastRequestResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [filter, setFilter] = useState(defaultFilter);\r\n  const [filterType, time] = filter.split(' ');\r\n  const requestUrl = `${redditUrl}/r/${props.subreddit}/${filterType}.json` + \r\n  ((time) ? `?t=${time}` : '');\r\n  // Transform the raw data by extracting the nested posts\r\n  const requestResToPosts = res => res.data.data.children.map(obj => obj.data);\r\n\r\n  // Loading posts on subreddit or filter change\r\n  useEffect(() => {\r\n    setLoadingPosts(true);\r\n    axios\r\n      .get(requestUrl)\r\n      .then(res => {\r\n        const posts = requestResToPosts(res);\r\n        setLoadingPosts(false);\r\n        setLastRequestResult(res.data.data);\r\n        setError(null);\r\n        setPosts(posts);\r\n      })\r\n      .catch(err => {\r\n        setLoadingPosts(false);\r\n        setError(err);\r\n        setPosts(null);\r\n      });\r\n  }, [props.subreddit, requestUrl]);\r\n  \r\n  // Loading more posts when scrolled to the bottom of the page\r\n  useEffect(() => {\r\n    if (loadingMore && !loadingPosts && lastRequestResult.after) {\r\n      const after = lastRequestResult.after;\r\n      axios\r\n        .get(requestUrl + '?after=' + after)\r\n        .then(res => {\r\n          const morePosts = requestResToPosts(res);\r\n          setPosts(prevPosts => prevPosts && prevPosts.concat(morePosts));\r\n          setLastRequestResult(res.data.data);\r\n          setLoadingMore(false);\r\n        })\r\n        .catch(() => {\r\n          setLoadingMore(false);\r\n        });\r\n    } else {\r\n      setLoadingMore(false);\r\n    }\r\n  }, [loadingMore, lastRequestResult, loadingPosts, requestUrl]);\r\n\r\n  // Setting the scroll event listener \r\n  useEffect(() => {\r\n    function handleScroll() {\r\n      const el = document.getElementById('root');\r\n      if (!loadingMore && \r\n          el.getBoundingClientRect().bottom <= window.innerHeight) {\r\n        setLoadingMore(true);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [loadingMore]);\r\n\r\n  return (\r\n    <div css={root}>\r\n      <SubRedditHeader subreddit={props.subreddit} \r\n        filter={filter} onSelection={setFilter}/>\r\n      {loadingPosts && <CircularProgress css={bigProgress} />}\r\n      {posts && posts.map(post => \r\n        <Post post={post} key={post.id} growIn={!loadingPosts} />)}\r\n      {error && !loadingPosts && <ErrorDisplay/>}\r\n      {loadingMore && <CircularProgress css={centeredProgress}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nSubReddit.propTypes = {\r\n  subreddit: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(SubReddit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/ArrowRightAlt';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 120,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props) {\r\n  const { classes } = props;\r\n\r\n  function handleKeyPress(event) {\r\n    if (event.key === 'Enter') {\r\n      window.scrollTo(0, 0);\r\n      props.onSubredditChange(event);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton onClick={props.onMenuClick} \r\n            className={classes.menuButton} \r\n            color=\"inherit\" aria-label=\"Open drawer\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} \r\n            variant=\"h6\" color=\"inherit\" noWrap>\r\n            React Reddit Client\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Go to subreddit\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n  onMenuClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SearchAppBar);\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, \r\n  DialogContentText, DialogActions, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { githubLink } from '../../consts';\r\n\r\n\r\nfunction AboutModal({open, onClose}) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        About\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Personal project by Orel Kanditan <br/>\r\n          Made using React, Material UI and Emotion <br/>\r\n          See the source code on {' '}\r\n          <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            GitHub\r\n          </a>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" autoFocus>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAboutModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default AboutModal;","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport { PropTypes } from 'prop-types';\r\nimport { SwipeableDrawer, List, ListItem, \r\n  ListItemText, ListItemIcon, Typography, Divider,\r\n  FormControlLabel, Switch } from '@material-ui/core';\r\nimport { InvertColors, InvertColorsOff, Info } from '@material-ui/icons';\r\nimport AboutModal from './AboutModal';\r\nimport { useExpand } from \"../shared/ExpandProvider\";\r\n\r\nconst root = css`\r\n  width: 250px;\r\n`;\r\nconst title = css`\r\n  margin: 0.5em;\r\n`;\r\nconst autoExpandListItem = css`\r\n  height: 3em;\r\n`;\r\nconst formControlLabel = css`\r\n  .label {\r\n    font-size: 1rem;\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nfunction AppDrawer({open, onOpen, onClose, onSelection}) {\r\n  const [aboutOpen, setAboutOpen] = useState(false);\r\n  const [autoExpand, setAutoExpand] = useExpand();\r\n\r\n  function handleExpandSwitch() {\r\n    onClose();\r\n    setAutoExpand(!autoExpand);\r\n  }\r\n\r\n  return (\r\n    <SwipeableDrawer open={open} onClose={onClose} onOpen={onOpen}>\r\n      <div css={root}>\r\n        <Typography variant='h5' css={title}>\r\n          React Reddit Client\r\n        </Typography>\r\n        <Divider/>\r\n        <List>\r\n          <ListItem button onClick={() => onSelection('light')}>\r\n            <ListItemIcon><InvertColors/></ListItemIcon>\r\n            <ListItemText primary='Light theme'/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => onSelection('dark')}>\r\n            <ListItemIcon><InvertColorsOff/></ListItemIcon>\r\n            <ListItemText primary='Dark theme'/>\r\n          </ListItem>\r\n          <ListItem button css={autoExpandListItem}>\r\n            <FormControlLabel\r\n              css={formControlLabel}\r\n              classes={{label: 'label'}}\r\n              control={\r\n                <Switch checked={autoExpand} \r\n                  onChange={handleExpandSwitch} />\r\n              }\r\n              label=\"Auto Expand\"/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => setAboutOpen(true)}>\r\n            <ListItemIcon><Info/></ListItemIcon>\r\n            <ListItemText primary='About'/>\r\n          </ListItem>\r\n        </List>\r\n        <AboutModal open={aboutOpen} onClose={() => setAboutOpen(false)}/>\r\n      </div>\r\n    </SwipeableDrawer>\r\n  );\r\n}\r\n\r\nAppDrawer.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n  onOpen: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppDrawer;","import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport AppBar from './AppBar';\r\nimport AppDrawer from './AppDrawer';\r\n\r\nfunction AppBarAndDrawer({onSubredditChange, onSelection}) {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  function handleSelection(selected) {\r\n    setDrawerOpen(false);\r\n    onSelection(selected);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar onSubredditChange={onSubredditChange} \r\n        onMenuClick={() => setDrawerOpen(true)}/>\r\n      <AppDrawer open={drawerOpen} \r\n        onSelection={handleSelection}\r\n        onOpen={() => setDrawerOpen(true)}\r\n        onClose={() => setDrawerOpen(false)}/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAppBarAndDrawer.propTypes = {\r\n  onSelection: PropTypes.func.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppBarAndDrawer;","/** @jsx jsx */\r\nimport { useState } from 'react';\r\nimport { Global, jsx, css } from \"@emotion/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport SubReddit from './SubReddit/SubReddit';\r\nimport AppBarAndDrawer from './App/AppBarAndDrawer';\r\nimport ExpandProvider from './shared/ExpandProvider';\r\n\r\nconst content = css`\r\n  margin-top: 5em;\r\n`;\r\nconst scrollbar = css`\r\n  body::-webkit-scrollbar {\r\n    width: 0.8em;\r\n  }\r\n  body::-webkit-scrollbar-track {\r\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n    box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n  }\r\n  body::-webkit-scrollbar-thumb {\r\n    background-color: #383838;\r\n    outline: 1px solid slategrey;\r\n  }\r\n`;\r\n\r\nconst darkColor = '#181a1b';\r\nconst defaultVariant = 'dark';\r\n\r\nfunction App() {\r\n  const [subreddit, setSubreddit] = useState('all');\r\n  const [themeVariant, setThemeVariant] = useState(defaultVariant);\r\n\r\n  function handleSubChange(event) {\r\n    setSubreddit(event.target.value);\r\n  }\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {main: red[800]},\r\n      secondary: {main: red[300]},\r\n      type: themeVariant\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\n\r\n  const linkColor = css`\r\n    a {\r\n      color: lightblue;\r\n    }\r\n  `;\r\n  const bgColor = themeVariant === 'dark' ? darkColor : 'inherit';\r\n  const global = css`\r\n    ${scrollbar}\r\n    body {\r\n      margin: 0;\r\n      background: ${bgColor};\r\n    }\r\n    ${themeVariant === 'dark' && linkColor}\r\n  `;\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Global styles={global}/>\r\n        <ExpandProvider>\r\n          <AppBarAndDrawer onSubredditChange={handleSubChange} \r\n            onSelection={setThemeVariant}/>\r\n          <div css={content}>\r\n            <SubReddit subreddit={subreddit}/>\r\n          </div>\r\n        </ExpandProvider>\r\n      </MuiThemeProvider>\r\n    </StylesProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}