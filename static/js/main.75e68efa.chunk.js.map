{"version":3,"sources":["components/Post/Votes.jsx","components/Post/TitleAndMetadata.jsx","components/Post/Thumbnail.jsx","components/shared/ExpandProvider.jsx","components/Post/Video.jsx","components/Post/AnimatedHover.jsx","components/shared/Collapse.jsx","components/shared/useMeasure.js","components/Post/PostMedia.jsx","components/Post/Post.jsx","components/Post/PostsList.jsx","consts.js","components/SubReddit/SubRedditHeader.jsx","components/SubReddit/SubReddit.jsx","components/App/AppBar.jsx","components/App/AboutModal.jsx","components/App/AppDrawer.jsx","components/App/AppBarAndDrawer.jsx","components/App.jsx","index.js"],"names":["upvoteColor","downvoteColor","root","css","_templateObject","iconButtonCss","_templateObject2","VoteState","UPVOTE","NO_VOTE","DOWNVOTE","Votes","props","num","_useState","useState","_useState2","Object","slicedToArray","voteState","setVoteState","handleVote","nextState","currentColor","getColorByState","makeButtonCss","desiredButtonState","_templateObject3","concat","upButtonCss","downButtonCss","textCss","_templateObject4","_templateObject5","core_browser_esm","index_es","aria-label","onClick","ExpandLess_default","a","variant","votes","toFixed","ExpandMore_default","TitleAndMetadata_templateObject","title","TitleAndMetadata_templateObject2","memo","_ref","post","postLink","permalink","href","target","rel","he","decode","subreddit_name_prefixed","thumbnail","Thumbnail_templateObject","Thumbnail","assign","alt","localExpandString","localStorage","getItem","defaultExpand","JSON","parse","ExpandContext","React","createContext","ExpandProvider","children","context","react_default","createElement","Provider","value","useExpand","_useContext","useContext","_useContext2","autoExpand","setAutoExpand","newExpand","setItem","video","Video_templateObject","src","muted","loop","autoPlay","controls","calc","x","y","window","innerHeight","innerWidth","trans","s","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","hoverProps","set","web","div","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","Collapse","isOpen","_useMeasure","ref","useRef","left","top","width","height","bounds","_useState3","ResizeObserver","entry","contentRect","ro","useEffect","current","observe","disconnect","useMeasure","_useMeasure2","bind","from","content","PostMedia_templateObject","sourceImg","PostMedia_templateObject2","text","PostMedia_templateObject3","PostMedia","expanded","hasImage","hasVideo","hasEmbed","hasText","htmlEmbed","shared_Collapse","Post_AnimatedHover","url","Post_Video","media","reddit_video","fallback_url","dangerouslySetInnerHTML","__html","react_markdown_default","source","selftext","rootCard","Post_templateObject","postSummary","Post_templateObject2","exapndIcon","Post_templateObject3","Post","_ref$growIn","growIn","_useExpand","setExpanded","deg","expandIconDirection","Post_templateObject4","handleExpanded","hasThumbnail","Boolean","startsWith","urlWithoutQuery","split","some","ext","endsWith","length","media_embed","canExpand","useMemo","removeWidthIfSmall","replace","in","timeout","Post_Votes","ups","Post_Thumbnail","thumbnail_height","Post_TitleAndMetadata","aria-expanded","Post_PostMedia","whyDidYouRender","PostsList","posts","loadingPosts","setWidth","handleResize","addEventListener","removeEventListener","map","Post_Post","key","id","redditUrl","filters","label","githubLink","formControl","SubRedditHeader_templateObject","rowPadding","SubRedditHeader_templateObject2","breakWord","SubRedditHeader_templateObject3","SubRedditHeader","subreddit","filter","onSelection","container","justify","item","xs","sm","md","lg","onChange","e","input","labelWidth","_ref2","SubReddit_templateObject","centeredProgress","SubReddit_templateObject2","bigProgress","SubReddit_templateObject3","ErrorDisplay","error","gutterBottom","response","defaultFilter","SubReddit","setPosts","_useState4","setLoadingPosts","_useState5","_useState6","lastRequestResult","setLastRequestResult","_useState7","_useState8","setError","_useState9","_useState10","loadingMore","setLoadingMore","_useState11","_useState12","setFilter","_filter$split","_filter$split2","filterType","time","requestUrl","requestResToPosts","res","data","obj","setUniquePosts","newPosts","uniqBy","axios","get","then","catch","err","after","morePosts","handleScroll","el","document","getElementById","getBoundingClientRect","bottom","SubReddit_SubRedditHeader","Post_PostsList","SubReddit_ErrorDisplay","SearchAppBar","classes","className","AppBar_default","position","Toolbar_default","toolbar","IconButton_default","onMenuClick","menuButton","color","Menu_default","Typography_default","noWrap","grow","search","searchIcon","ArrowRightAlt_default","InputBase_default","placeholder","inputRoot","inputInput","onKeyPress","event","scrollTo","onSubredditChange","withStyles","theme","flexGrow","marginLeft","marginRight","defineProperty","display","breakpoints","up","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","spacing","unit","pointerEvents","alignItems","justifyContent","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","minHeight","AboutModal","open","onClose","aria-labelledby","aria-describedby","autoFocus","AppDrawer_templateObject","AppDrawer_templateObject2","autoExpandListItem","AppDrawer_templateObject3","formControlLabel","AppDrawer_templateObject4","AppDrawer","onOpen","aboutOpen","setAboutOpen","_useExpand2","button","icons_index_es","primary","control","checked","App_AboutModal","AppBarAndDrawer","drawerOpen","setDrawerOpen","Fragment","App_AppBar","App_AppDrawer","selected","App_templateObject","scrollbar","App_templateObject2","darkColor","defaultVariant","App","setSubreddit","themeVariant","setThemeVariant","createMuiTheme","main","red","secondary","type","typography","useNextVariants","linkColor","App_templateObject3","bgColor","global","App_templateObject4","StylesProvider","injectFirst","core_styles","styles","App_AppBarAndDrawer","trim","newTheme","SubReddit_SubReddit","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.75e68efa.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, IconButton } from \"@material-ui/core\";\r\nimport UpVote from \"@material-ui/icons/ExpandLess\";\r\nimport DownVote from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst upvoteColor = \"#FF8b60\";\r\nconst downvoteColor = \"#9494FF\";\r\n\r\nconst root = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  margin: auto 4% auto 0;\r\n`;\r\nconst iconButtonCss = css`\r\n  padding: 7px 0;\r\n  width: 40px;\r\n`;\r\n\r\nconst VoteState = {\r\n  UPVOTE: 1,\r\n  NO_VOTE: 0,\r\n  DOWNVOTE: -1\r\n};\r\n\r\nfunction getColorByState(voteState) {\r\n  switch (voteState) {\r\n  case VoteState.UPVOTE:\r\n    return upvoteColor;\r\n  case VoteState.DOWNVOTE:\r\n    return downvoteColor;\r\n  default:\r\n    return 'inherit';\r\n  }\r\n}\r\n\r\nfunction kFormatter(num) {\r\n  return num > 999 ? \r\n    (num / 1000).toFixed(1) + 'k' \r\n    : num;\r\n}\r\n\r\nfunction Votes(props) {\r\n  const [voteState, setVoteState] = useState(VoteState.NO_VOTE);\r\n\r\n  const handleVote = nextState => () => {\r\n    if (nextState === voteState) setVoteState(VoteState.NO_VOTE);\r\n    else setVoteState(nextState);\r\n  };\r\n\r\n  const currentColor = getColorByState(voteState);\r\n  const makeButtonCss = desiredButtonState => css`\r\n    ${iconButtonCss};\r\n    ${voteState === desiredButtonState && `color: ${currentColor};`}\r\n  `;\r\n  const upButtonCss = makeButtonCss(VoteState.UPVOTE);\r\n  const downButtonCss = makeButtonCss(VoteState.DOWNVOTE);\r\n  const textCss = (voteState === VoteState.NO_VOTE) ? css`` : \r\n    css`\r\n      color: ${currentColor};\r\n    `;\r\n  return (\r\n    <div css={root}>\r\n      <IconButton\r\n        css={upButtonCss} aria-label=\"Upvote\" \r\n        onClick={handleVote(VoteState.UPVOTE)}\r\n      >\r\n        <UpVote />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h5\" css={textCss}>\r\n        {kFormatter(props.votes + voteState)}\r\n      </Typography>\r\n\r\n      <IconButton\r\n        css={downButtonCss} aria-label=\"Downvote\"\r\n        onClick={handleVote(VoteState.DOWNVOTE)}\r\n      >\r\n        <DownVote />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nVotes.propTypes = {\r\n  votes: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Votes;\r\n","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport {Typography} from '@material-ui/core';\r\nimport he from 'he';\r\n\r\nconst root = css`\r\n  margin: auto 0;\r\n  h4 {\r\n    font-size: 12pt;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\nconst title = css`\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nfunction TitleAndMetadata({ post }) {\r\n  const postLink = `https://www.reddit.com${post.permalink}`;\r\n\r\n  return (\r\n    <div css={root}>\r\n      <Typography variant=\"h5\" css={title}>\r\n        <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {he.decode(post.title)}\r\n        </a>\r\n      </Typography>\r\n      <div>\r\n        <Typography variant='h4'>\r\n          {post.subreddit_name_prefixed}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTitleAndMetadata.propTypes = {\r\n  post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default memo(TitleAndMetadata);","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst thumbnail = css`\r\n  margin: auto 4% auto 0;\r\n  width: auto;\r\n  max-height: 7em;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 25%;\r\n    height: auto;\r\n    align-self: center;\r\n  }\r\n`;\r\n\r\nfunction Thumbnail(props){\r\n  return (\r\n    <img alt='thumbnail' css={thumbnail} {...props} />\r\n  );\r\n}\r\n\r\nThumbnail.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Thumbnail;","import React, { useState, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst localExpandString = localStorage.getItem('autoExpand');\r\nconst defaultExpand = \r\n  (localExpandString && JSON.parse(localExpandString)) || false;\r\nexport const ExpandContext = React.createContext(defaultExpand);\r\n\r\nexport default function ExpandProvider({children}) {\r\n  const [autoExpand, setAutoExpand] = useState(defaultExpand);\r\n  const context = [autoExpand, setAutoExpand];\r\n\r\n  return (\r\n    <ExpandContext.Provider value={context}>\r\n      {children}\r\n    </ExpandContext.Provider>\r\n  );\r\n}\r\n\r\nExpandProvider.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport function useExpand() {\r\n  const [autoExpand, setAutoExpand] = useContext(ExpandContext);\r\n  const setAutoExpandToLocalStorage = (newExpand) => {\r\n    if (newExpand !== autoExpand) {\r\n      localStorage.setItem('autoExpand', newExpand);\r\n      setAutoExpand(newExpand);\r\n    }\r\n  };\r\n\r\n  return [autoExpand, setAutoExpandToLocalStorage];\r\n}\r\n\r\n","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst video = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n`;\r\n\r\nfunction Video({src}) {\r\n  return (\r\n    <video muted loop autoPlay controls css={video}>\r\n      <source src={src}/>\r\n    </video>\r\n  );\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(Video);","import React, { memo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst calc = (x, y) => [\r\n  -(y - window.innerHeight / 2) / 20,\r\n  (x - window.innerWidth / 2) / 20,\r\n  1.25\r\n];\r\nconst trans = (x, y, s) => \r\n  `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\nfunction AnimatedHover (props) {\r\n  const [hoverProps, set] = useSpring(() => ({\r\n    xys: [0, 0, 1],\r\n    config: { mass: 3, tension: 400, friction: 40 }\r\n  }));\r\n\r\n  return (\r\n    <animated.div\r\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n      style={{ transform: hoverProps.xys.interpolate(trans) }}\r\n    > \r\n      {props.children}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nAnimatedHover.propTypes = {\r\n  children: PropTypes.object.isRequired\r\n};\r\n\r\nexport default memo(AnimatedHover);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useMeasure } from './useMeasure';\r\n\r\nfunction Collapse({ isOpen, children }) {\r\n  const [bind, {height}] = useMeasure();\r\n  const props = useSpring({\r\n    height: (isOpen ? height : 0),\r\n    from: {height: (isOpen ? 0 : height)}});\r\n  \r\n  return (\r\n    <animated.div style={props}>\r\n      <div {...bind}>\r\n        {children}\r\n      </div>\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nCollapse.propTypes = {\r\n  children: PropTypes.any,\r\n  isOpen: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Collapse;","import { useState, useRef, useEffect } from 'react';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nexport function usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => void (ref.current = value), [value]);\r\n  return ref.current;\r\n}\r\n\r\nexport function useMeasure() {\r\n  const ref = useRef();\r\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\r\n  const [ro] = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)));\r\n  \r\n  useEffect(() => {\r\n    if (ref.current) ro.observe(ref.current);\r\n    return () => ro.disconnect();\r\n  }, [ro]);\r\n\r\n  return [{ ref }, bounds];\r\n}\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Markdown from 'react-markdown';\r\nimport he from 'he';\r\nimport Video from './Video';\r\nimport AnimatedHover from './AnimatedHover';\r\nimport Collapse from '../shared/Collapse';\r\n\r\nconst content = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 0 2em 1em 2em;  \r\n  @media only screen and (max-width: 768px) {\r\n    padding: 5%;\r\n    padding-top: 0;\r\n  }\r\n`;\r\nconst sourceImg = css`\r\n  max-height: 70vh;\r\n  max-width: 100%;\r\n  margin: auto 0;\r\n  display: block;\r\n`;\r\nconst text = css`\r\n  overflow: auto;\r\n  @media only screen and (max-width: 768px) {\r\n    max-width: 85%;\r\n    margin: 0 auto;\r\n  }\r\n  p {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\n// Stateless Component that displays the post media\r\nfunction PostMedia({ post, expanded, hasImage, \r\n  hasVideo, hasEmbed, hasText, htmlEmbed }) {\r\n  \r\n  return (\r\n    <Collapse isOpen={expanded}>\r\n      <div css={content}>\r\n        {hasImage && \r\n        <AnimatedHover>\r\n          <img src={post.url} alt='source' css={sourceImg}/>\r\n        </AnimatedHover>}\r\n        {hasVideo && <Video src={post.media.reddit_video.fallback_url}/>}\r\n        {hasEmbed && \r\n        <div dangerouslySetInnerHTML={{__html: htmlEmbed}}/>}\r\n        {hasText && \r\n        <Typography variant='h5' css={text}>\r\n          <Markdown source={he.decode(post.selftext)}/>\r\n        </Typography>}\r\n      </div>\r\n    </Collapse>\r\n  );\r\n}\r\n\r\nPostMedia.propTypes = {\r\n  expanded: PropTypes.bool.isRequired,\r\n  hasEmbed: PropTypes.bool.isRequired,\r\n  hasImage: PropTypes.bool.isRequired,\r\n  hasText: PropTypes.bool.isRequired,\r\n  hasVideo: PropTypes.bool.isRequired,\r\n  htmlEmbed: PropTypes.any,\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default PostMedia;","/** @jsx jsx */\r\nimport { useState, useEffect, useMemo, memo } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, IconButton, Grow } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport he from 'he';\r\nimport Votes from \"./Votes\";\r\nimport TitleAndMetadata from \"./TitleAndMetadata\";\r\nimport Thumbnail from './Thumbnail';\r\nimport { useExpand } from '../shared/ExpandProvider';\r\nimport PostMedia from './PostMedia';\r\n\r\nconst rootCard = css`\r\n  min-width: 275px;\r\n  margin: 1em auto;\r\n  h5 {\r\n    font-size: 13pt;\r\n  }\r\n`;\r\nconst postSummary = css`\r\n  display: flex;\r\n  padding: 1em 3%;\r\n`;\r\nconst exapndIcon = css`\r\n  height: fit-content;\r\n  margin: auto 0 auto auto;\r\n  transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n`;\r\n\r\nfunction Post({ post, width, growIn = true}) {\r\n  const [autoExpand] = useExpand();\r\n  const [expanded, setExpanded] = useState(autoExpand);\r\n\r\n  const deg = expanded ? 180 : 0;\r\n  const expandIconDirection = css`\r\n    transform: rotate(${deg}deg);\r\n  `;\r\n\r\n  const handleExpanded = () => setExpanded(!expanded);\r\n\r\n  // Change Post expansion when auto expand chnages\r\n  useEffect(() => {\r\n    setExpanded(autoExpand);\r\n  }, [autoExpand]);\r\n\r\n  // Different media logic\r\n  const hasThumbnail = Boolean(post.thumbnail.startsWith('http'));\r\n  const urlWithoutQuery = post.url.split('?')[0];\r\n  const hasImage = Boolean(['.jpg', '.jpeg', '.gif', '.png']\r\n    .some(ext => urlWithoutQuery.endsWith(ext)));\r\n  const hasText = Boolean(post.selftext && (post.selftext.length > 0));\r\n  const hasVideo = Boolean(post.media && post.media.reddit_video && \r\n    post.media.reddit_video.fallback_url);\r\n  const hasEmbed = Boolean(post.media_embed && post.media_embed.content);\r\n  const canExpand = (hasImage || hasText || hasVideo || hasEmbed);\r\n  \r\n  // If it's a small screen, removes width and height from the media embed\r\n  const htmlEmbed = useMemo(() => {\r\n    const removeWidthIfSmall = hasEmbed && \r\n      width <= 768 ? \r\n      post.media_embed.content.replace(/width=\"[0-9]+\"/, '')\r\n        .replace(/height=\"[0-9]+\"/, '') :\r\n      post.media_embed.content;\r\n    return hasEmbed && he.decode(removeWidthIfSmall);\r\n  }, [width, hasEmbed, post]);\r\n\r\n  return (\r\n    <Grow in={growIn} timeout={500}>\r\n      <Card css={rootCard}>\r\n        <div css={postSummary}>\r\n          <Votes votes={post.ups} />\r\n          {hasThumbnail && \r\n          <Thumbnail src={post.thumbnail} \r\n            height={post.thumbnail_height} onClick={handleExpanded}/>}\r\n          <TitleAndMetadata post={post}/>\r\n          {canExpand && \r\n          <IconButton css={[exapndIcon, expandIconDirection]} \r\n            onClick={handleExpanded} aria-expanded={expanded}>\r\n            <ExpandMoreIcon/>\r\n          </IconButton>}\r\n        </div>\r\n        {canExpand && \r\n        <PostMedia post={post} expanded={expanded} htmlEmbed={htmlEmbed}\r\n          hasEmbed={hasEmbed} hasImage={hasImage} \r\n          hasText={hasText} hasVideo={hasVideo} />}\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  growIn: PropTypes.bool,\r\n  width: PropTypes.number.isRequired,\r\n};\r\n\r\nPost.whyDidYouRender = true;\r\n\r\nexport default memo(Post);\r\n","/** @jsx jsx */\r\nimport { useState, useEffect, memo } from 'react';\r\nimport { jsx } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport Post from './Post';\r\n\r\nfunction PostsList({ posts, loadingPosts }) {\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n\r\n  // Window width listener\r\n  useEffect(() => {\r\n    const handleResize = () => setWidth(window.innerWidth);\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    posts && posts.map(post => \r\n      <Post post={post} key={post.id} growIn={!loadingPosts} width={width}/>)\r\n  );\r\n}\r\n\r\nPostsList.propTypes = {\r\n  loadingPosts: PropTypes.bool.isRequired,\r\n  posts: PropTypes.array,\r\n};\r\n\r\nPostsList.whyDidYouRender = true;\r\n\r\nexport default memo(PostsList);","export const redditUrl = 'https://www.reddit.com';\r\n\r\nexport const filters = [\r\n  {label: 'Hot', value: 'hot'},\r\n  {label: 'Top Hour', value: 'top hour'},\r\n  {label: 'Top Day', value: 'top day'},\r\n  {label: 'Top Week', value: 'top week'},\r\n  {label: 'Top Month', value: 'top month'},\r\n  {label: 'Top All Time', value: 'top all'},\r\n  {label: 'New', value: 'new'},\r\n  {label: 'Best', value: 'best'},\r\n  {label: 'Controversial', value: 'controversial'},\r\n];\r\n\r\nexport const githubLink = 'https://github.com/orelkan/react-reddit-client';","/** @jsx jsx */\r\nimport { memo } from \"react\";\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, FormControl, InputLabel,\r\n  Select, OutlinedInput, MenuItem, Grid } from \"@material-ui/core\";\r\nimport { filters } from '../../consts';\r\n\r\nconst formControl = css`\r\n  min-width: 120px;\r\n`;\r\nconst rowPadding = css`\r\n  @media only screen and (max-width: 768px) {\r\n    padding-bottom: 1em;\r\n  }\r\n`;\r\nconst breakWord = css`\r\n  overflow-wrap: break-word;\r\n`;\r\n\r\nfunction SubRedditHeader({ subreddit, filter, onSelection }) {\r\n  return (\r\n    <Grid container justify=\"space-between\">\r\n      <Grid item xs={12} sm={6} md={6} lg={6} css={rowPadding}>\r\n        <Typography variant=\"h2\" css={breakWord}>\r\n          {`/r/${subreddit}`}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <FormControl variant=\"outlined\" css={formControl}>\r\n          <InputLabel>Order</InputLabel>\r\n          <Select\r\n            value={filter}\r\n            onChange={e => onSelection(e.target.value)}\r\n            input={\r\n              <OutlinedInput labelWidth={43}/>\r\n            }\r\n          >\r\n            {filters.map(({ label, value }) => \r\n              <MenuItem key={value} value={value}>{label}</MenuItem>\r\n            )}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid> \r\n    </Grid>\r\n  );\r\n}\r\n\r\nSubRedditHeader.propTypes = {\r\n  subreddit: PropTypes.string.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n};\r\n\r\nSubRedditHeader.whyDidYouRender = true;\r\n\r\nexport default memo(SubRedditHeader);","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { uniqBy } from 'lodash';\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport PostsList from \"../Post/PostsList\";\r\nimport { redditUrl } from '../../consts';\r\nimport SubRedditHeader from './SubRedditHeader';\r\n\r\nconst root = css`\r\n  margin: 2em 7%;\r\n  @media only screen and (max-width: 768px) {\r\n    margin: 2em 4%;\r\n  }\r\n`;\r\nconst centeredProgress = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: auto;\r\n`;\r\nconst bigProgress = css`\r\n  ${centeredProgress};\r\n  width: 8em !important;\r\n  height: 8em !important;\r\n  margin-top: 3em;\r\n`;\r\n\r\nconst ErrorDisplay = ({ error }) => (\r\n  <Typography variant=\"h3\" gutterBottom>\r\n    {error.response ? \"No such Subreddit\" : \"Network Error\"}\r\n  </Typography>\r\n);\r\n\r\nconst defaultFilter = 'hot';\r\n\r\nfunction SubReddit(props) {\r\n  const [posts, setPosts] = useState(null);\r\n  const [loadingPosts, setLoadingPosts] = useState(false);\r\n  const [lastRequestResult, setLastRequestResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [filter, setFilter] = useState(defaultFilter);\r\n\r\n  // If the filter has a time aspect it will be seperated by space\r\n  // example: 'top hour'\r\n  const [filterType, time] = filter.split(' ');\r\n  const requestUrl = `${redditUrl}/r/${props.subreddit}/${filterType}.json` + \r\n  ((time) ? `?t=${time}` : '');\r\n  // Transform the raw data by extracting the nested posts\r\n  const requestResToPosts = res => res.data.data.children.map(obj => obj.data);\r\n  const setUniquePosts = newPosts => setPosts(uniqBy(newPosts, 'id'));\r\n\r\n  // Loading posts on subreddit or filter change\r\n  useEffect(() => {\r\n    setLoadingPosts(true);\r\n    axios\r\n      .get(requestUrl)\r\n      .then(res => {\r\n        const newPosts = requestResToPosts(res);\r\n        setLoadingPosts(false);\r\n        setLastRequestResult(res.data.data);\r\n        setError(null);\r\n        setUniquePosts(newPosts);\r\n      })\r\n      .catch(err => {\r\n        setLoadingPosts(false);\r\n        setError(err);\r\n        setPosts(null);\r\n      });\r\n  }, [props.subreddit, requestUrl]);\r\n  \r\n  // Loading more posts when scrolled to the bottom of the page\r\n  useEffect(() => {\r\n    if (loadingMore && !loadingPosts && lastRequestResult.after) {\r\n      const after = lastRequestResult.after;\r\n      axios\r\n        .get(requestUrl + '?after=' + after)\r\n        .then(res => {\r\n          const morePosts = requestResToPosts(res);\r\n          setUniquePosts(posts && posts.concat(morePosts));\r\n          setLastRequestResult(res.data.data);\r\n          setLoadingMore(false);\r\n        })\r\n        .catch(() => {\r\n          setLoadingMore(false);\r\n        });\r\n    } else {\r\n      setLoadingMore(false);\r\n    }\r\n  }, [loadingMore, lastRequestResult, loadingPosts, requestUrl, posts]);\r\n\r\n  // Setting the scroll event listener \r\n  useEffect(() => {\r\n    function handleScroll() {\r\n      const el = document.getElementById('root');\r\n      if (!loadingMore && \r\n          el.getBoundingClientRect().bottom <= window.innerHeight) {\r\n        setLoadingMore(true);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [loadingMore]);\r\n\r\n  return (\r\n    <div css={root}>\r\n      <SubRedditHeader subreddit={props.subreddit} \r\n        filter={filter} onSelection={setFilter}/>\r\n      {loadingPosts && <CircularProgress css={bigProgress}/>}\r\n      <PostsList posts={posts} loadingPosts={loadingPosts}/>\r\n      {error && !loadingPosts && <ErrorDisplay error={error}/>}\r\n      {loadingMore && <CircularProgress css={centeredProgress}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nSubReddit.propTypes = {\r\n  subreddit: PropTypes.string.isRequired\r\n};\r\n\r\nSubReddit.whyDidYouRender = true;\r\n\r\nexport default memo(SubReddit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/ArrowRightAlt';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 120,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n  toolbar: {\r\n    minHeight: '52px'\r\n  }\r\n});\r\n\r\nfunction SearchAppBar(props) {\r\n  const { classes } = props;\r\n\r\n  function handleKeyPress(event) {\r\n    if (event.key === 'Enter') {\r\n      window.scrollTo(0, 0);\r\n      props.onSubredditChange(event);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton onClick={props.onMenuClick} \r\n            className={classes.menuButton} \r\n            color=\"inherit\" aria-label=\"Open drawer\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} \r\n            variant=\"h6\" color=\"inherit\" noWrap>\r\n            React Reddit Client\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Go to subreddit\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n  onMenuClick: PropTypes.func.isRequired,\r\n};\r\n\r\nSearchAppBar.whyDidYouRender = true;\r\n\r\nexport default withStyles(styles)(SearchAppBar);\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, \r\n  DialogContentText, DialogActions, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { githubLink } from '../../consts';\r\n\r\n\r\nfunction AboutModal({open, onClose}) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        About\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Personal project by Orel Kanditan <br/>\r\n          Made using React, Material UI and Emotion <br/>\r\n          See the source code on {' '}\r\n          <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            GitHub\r\n          </a>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" autoFocus>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAboutModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default AboutModal;","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport { PropTypes } from 'prop-types';\r\nimport { SwipeableDrawer, List, ListItem, \r\n  ListItemText, ListItemIcon, Typography, Divider,\r\n  FormControlLabel, Switch } from '@material-ui/core';\r\nimport { InvertColors, InvertColorsOff, Info } from '@material-ui/icons';\r\nimport AboutModal from './AboutModal';\r\nimport { useExpand } from \"../shared/ExpandProvider\";\r\n\r\nconst root = css`\r\n  width: 250px;\r\n`;\r\nconst title = css`\r\n  margin: 0.5em;\r\n`;\r\nconst autoExpandListItem = css`\r\n  height: 3em;\r\n`;\r\nconst formControlLabel = css`\r\n  .label {\r\n    font-size: 1rem;\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nfunction AppDrawer({open, onOpen, onClose, onSelection}) {\r\n  const [aboutOpen, setAboutOpen] = useState(false);\r\n  const [autoExpand, setAutoExpand] = useExpand();\r\n\r\n  function handleExpandSwitch() {\r\n    onClose();\r\n    setAutoExpand(!autoExpand);\r\n  }\r\n\r\n  return (\r\n    <SwipeableDrawer open={open} onClose={onClose} onOpen={onOpen}>\r\n      <div css={root}>\r\n        <Typography variant='h5' css={title}>\r\n          React Reddit Client\r\n        </Typography>\r\n        <Divider/>\r\n        <List>\r\n          <ListItem button onClick={() => onSelection('light')}>\r\n            <ListItemIcon><InvertColors/></ListItemIcon>\r\n            <ListItemText primary='Light theme'/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => onSelection('dark')}>\r\n            <ListItemIcon><InvertColorsOff/></ListItemIcon>\r\n            <ListItemText primary='Dark theme'/>\r\n          </ListItem>\r\n          <ListItem button css={autoExpandListItem}>\r\n            <FormControlLabel\r\n              css={formControlLabel}\r\n              classes={{label: 'label'}}\r\n              control={\r\n                <Switch checked={autoExpand} \r\n                  onChange={handleExpandSwitch} />\r\n              }\r\n              label=\"Auto Expand\"/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => setAboutOpen(true)}>\r\n            <ListItemIcon><Info/></ListItemIcon>\r\n            <ListItemText primary='About'/>\r\n          </ListItem>\r\n        </List>\r\n        <AboutModal open={aboutOpen} onClose={() => setAboutOpen(false)}/>\r\n      </div>\r\n    </SwipeableDrawer>\r\n  );\r\n}\r\n\r\nAppDrawer.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n  onOpen: PropTypes.func.isRequired,\r\n};\r\n\r\nAppDrawer.whyDidYouRender = true;\r\n\r\nexport default AppDrawer;","import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport AppBar from './AppBar';\r\nimport AppDrawer from './AppDrawer';\r\n\r\nfunction AppBarAndDrawer({onSubredditChange, onSelection}) {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  function handleSelection(selected) {\r\n    setDrawerOpen(false);\r\n    onSelection(selected);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar onSubredditChange={onSubredditChange} \r\n        onMenuClick={() => setDrawerOpen(true)}/>\r\n      <AppDrawer open={drawerOpen} \r\n        onSelection={handleSelection}\r\n        onOpen={() => setDrawerOpen(true)}\r\n        onClose={() => setDrawerOpen(false)}/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAppBarAndDrawer.propTypes = {\r\n  onSelection: PropTypes.func.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n};\r\n\r\nAppBarAndDrawer.whyDidYouRender = true;\r\n\r\nexport default AppBarAndDrawer;","/** @jsx jsx */\r\nimport { useState } from 'react';\r\nimport { Global, jsx, css } from \"@emotion/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport SubReddit from './SubReddit/SubReddit';\r\nimport AppBarAndDrawer from './App/AppBarAndDrawer';\r\nimport ExpandProvider from './shared/ExpandProvider';\r\n\r\nconst content = css`\r\n  margin-top: 4.5em;\r\n`;\r\nconst scrollbar = css`\r\n  body::-webkit-scrollbar {\r\n    width: 0.5em;\r\n  }\r\n  body::-webkit-scrollbar-track {\r\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n    box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n  }\r\n  body::-webkit-scrollbar-thumb {\r\n    background-color: #383838;\r\n    outline: 1px solid slategrey;\r\n  }\r\n`;\r\n\r\nconst darkColor = '#181a1b';\r\nconst defaultVariant = localStorage.getItem('theme') || 'dark';\r\n\r\nfunction App() {\r\n  const [subreddit, setSubreddit] = useState('all');\r\n  const [themeVariant, setThemeVariant] = useState(defaultVariant);\r\n\r\n  function handleSubChange(event) {\r\n    setSubreddit(event.target.value.trim());\r\n  }\r\n\r\n  function setThemeToLocalStorage(newTheme) {\r\n    localStorage.setItem('theme', newTheme);\r\n    setThemeVariant(newTheme);\r\n  }\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {main: red[800]},\r\n      secondary: {main: red[300]},\r\n      type: themeVariant\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\n\r\n  const linkColor = css`\r\n    a {\r\n      color: lightblue;\r\n    }\r\n  `;\r\n  const bgColor = themeVariant === 'dark' ? darkColor : 'inherit';\r\n  const global = css`\r\n    ${scrollbar}\r\n    body {\r\n      margin: 0;\r\n      background: ${bgColor};\r\n    }\r\n    ${themeVariant === 'dark' && linkColor}\r\n  `;\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Global styles={global}/>\r\n        <ExpandProvider>\r\n          <AppBarAndDrawer onSubredditChange={handleSubChange} \r\n            onSelection={setThemeToLocalStorage}/>\r\n          <div css={content}>\r\n            <SubReddit subreddit={subreddit}/>\r\n          </div>\r\n        </ExpandProvider>\r\n      </MuiThemeProvider>\r\n    </StylesProvider>\r\n  );\r\n}\r\n\r\nApp.whyDidYouRender = true;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nconst devMode = false;\r\n\r\nif (devMode) {\r\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\r\n  whyDidYouRender(React);\r\n}\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}