{"version":3,"sources":["components/Post/Votes.jsx","components/Post/TitleAndMetadata.jsx","components/Post/Thumbnail.jsx","components/Post/Video.jsx","components/Post/AnimatedHover.jsx","components/shared/ExpandProvider.jsx","components/Post/Post.jsx","consts.js","components/SubReddit/SubRedditHeader.jsx","components/SubReddit/SubReddit.jsx","components/App/AppBar.jsx","components/App/AboutModal.jsx","components/App/AppDrawer.jsx","components/App/AppBarAndDrawer.jsx","components/App.jsx","index.js"],"names":["upvoteColor","downvoteColor","root","css","_templateObject","iconButtonCss","_templateObject2","VoteState","UPVOTE","NO_VOTE","DOWNVOTE","Votes","props","_useState","useState","_useState2","Object","slicedToArray","voteState","setVoteState","handleVote","nextState","currentColor","getColorByState","makeButtonCss","desiredButtonState","_templateObject3","concat","upButtonCss","downButtonCss","textCss","_templateObject4","_templateObject5","core_browser_esm","index_es","aria-label","onClick","ExpandLess_default","a","variant","votes","ExpandMore_default","TitleAndMetadata_templateObject","title","TitleAndMetadata_templateObject2","TitleAndMetadata","_ref","post","postLink","permalink","href","target","rel","he","decode","subreddit_name_prefixed","thumbnail","Thumbnail_templateObject","Thumbnail","assign","alt","video","Video_templateObject","Video","src","muted","loop","autoPlay","controls","calc","x","y","window","innerHeight","innerWidth","trans","s","AnimatedHover","_useSpring","useSpring","xys","config","mass","tension","friction","_useSpring2","hoverProps","set","react_default","createElement","web","div","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","children","defaultExpand","ExpandContext","React","createContext","ExpandProvider","context","Provider","value","useExpand","_useContext","useContext","_useContext2","card","Post_templateObject","cardContent","Post_templateObject2","sourceImg","Post_templateObject3","exapnd","Post_templateObject4","collapse","Post_templateObject5","collapseContent","_templateObject6","text","_templateObject7","Post","_ref$growIn","growIn","_useExpand","autoExpand","expanded","setExpanded","handleExpanded","useEffect","hasThumbnail","startsWith","urlWithoutQuery","url","split","hasImage","some","ext","endsWith","hasText","selftext","length","hasVideo","media","reddit_video","fallback_url","hasEmbed","media_embed","content","canExpand","in","timeout","Post_Votes","ups","Post_Thumbnail","height","thumbnail_height","Post_TitleAndMetadata","aria-expanded","unmountOnExit","Post_AnimatedHover","Post_Video","dangerouslySetInnerHTML","__html","react_markdown_default","source","redditUrl","filters","label","githubLink","SubRedditHeader_templateObject","formControl","SubRedditHeader_templateObject2","SubRedditHeader","subreddit","filter","onSelection","onChange","e","input","labelWidth","map","_ref2","key","SubReddit_templateObject","centeredProgress","SubReddit_templateObject2","bigProgress","SubReddit_templateObject3","ErrorDisplay","gutterBottom","defaultFilter","memo","posts","setPosts","_useState3","_useState4","loadingPosts","setLoadingPosts","_useState5","_useState6","lastRequestResult","setLastRequestResult","_useState7","_useState8","error","setError","_useState9","_useState10","loadingMore","setLoadingMore","_useState11","_useState12","setFilter","_filter$split","_filter$split2","filterType","time","requestUrl","requestResToPosts","res","data","obj","axios","get","then","catch","err","after","morePosts","prevPosts","handleScroll","el","document","getElementById","getBoundingClientRect","bottom","addEventListener","removeEventListener","SubReddit_SubRedditHeader","Post_Post","id","SubReddit_ErrorDisplay","withStyles","theme","width","grow","flexGrow","menuButton","marginLeft","marginRight","defineProperty","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","&:hover","spacing","unit","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingTop","paddingRight","paddingBottom","paddingLeft","transition","transitions","create","&:focus","classes","className","AppBar_default","Toolbar_default","IconButton_default","onMenuClick","Menu_default","Typography_default","noWrap","ArrowRightAlt_default","InputBase_default","placeholder","onKeyPress","event","scrollTo","onSubredditChange","AboutModal","open","onClose","aria-labelledby","aria-describedby","autoFocus","AppDrawer_templateObject","AppDrawer_templateObject2","autoExpandListItem","AppDrawer_templateObject3","formControlLabel","AppDrawer_templateObject4","AppDrawer","onOpen","aboutOpen","setAboutOpen","_useExpand2","setAutoExpand","button","icons_index_es","primary","control","checked","App_AboutModal","AppBarAndDrawer","drawerOpen","setDrawerOpen","Fragment","App_AppBar","App_AppDrawer","selected","App_templateObject","scrollbar","App_templateObject2","darkColor","defaultVariant","App","setSubreddit","themeVariant","setThemeVariant","createMuiTheme","main","red","secondary","type","typography","useNextVariants","linkColor","App_templateObject3","bgColor","global","App_templateObject4","StylesProvider","injectFirst","core_styles","styles","App_AppBarAndDrawer","SubReddit_SubReddit","ReactDOM","render","components_App"],"mappings":"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","file":"static/js/main.b796a069.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { useState } from \"react\";\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, IconButton } from \"@material-ui/core\";\r\nimport UpVote from \"@material-ui/icons/ExpandLess\";\r\nimport DownVote from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst upvoteColor = \"#FF8b60\";\r\nconst downvoteColor = \"#9494FF\";\r\n\r\nconst root = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  align-items: center;\r\n  margin: auto 4% auto 0;\r\n`;\r\nconst iconButtonCss = css`\r\n  padding: 7px 0;\r\n  width: 40px;\r\n`;\r\n\r\nconst VoteState = {\r\n  UPVOTE: 1,\r\n  NO_VOTE: 0,\r\n  DOWNVOTE: -1\r\n};\r\n\r\nfunction getColorByState(voteState) {\r\n  switch (voteState) {\r\n  case VoteState.UPVOTE:\r\n    return upvoteColor;\r\n  case VoteState.DOWNVOTE:\r\n    return downvoteColor;\r\n  default:\r\n    return 'inherit';\r\n  }\r\n}\r\n\r\nfunction Votes(props) {\r\n  const [voteState, setVoteState] = useState(VoteState.NO_VOTE);\r\n\r\n  const handleVote = nextState => () => {\r\n    if (nextState === voteState) setVoteState(VoteState.NO_VOTE);\r\n    else setVoteState(nextState);\r\n  };\r\n\r\n  const currentColor = getColorByState(voteState);\r\n  const makeButtonCss = desiredButtonState => css`\r\n    ${iconButtonCss};\r\n    ${voteState === desiredButtonState && `color: ${currentColor};`}\r\n  `;\r\n  const upButtonCss = makeButtonCss(VoteState.UPVOTE);\r\n  const downButtonCss = makeButtonCss(VoteState.DOWNVOTE);\r\n  const textCss = (voteState === VoteState.NO_VOTE) ? css`` : \r\n    css`\r\n      color: ${currentColor};\r\n    `;\r\n  return (\r\n    <div css={root}>\r\n      <IconButton\r\n        css={upButtonCss} aria-label=\"Upvote\" \r\n        onClick={handleVote(VoteState.UPVOTE)}\r\n      >\r\n        <UpVote />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h5\" css={textCss}>\r\n        {props.votes + voteState}\r\n      </Typography>\r\n\r\n      <IconButton\r\n        css={downButtonCss} aria-label=\"Downvote\"\r\n        onClick={handleVote(VoteState.DOWNVOTE)}\r\n      >\r\n        <DownVote />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nVotes.propTypes = {\r\n  votes: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Votes;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport {Typography} from '@material-ui/core';\r\nimport he from 'he';\r\n\r\nconst root = css`\r\n  margin: auto 0;\r\n  h4 {\r\n    font-size: 12pt;\r\n  }\r\n`;\r\nconst title = css`\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nfunction TitleAndMetadata({post}) {\r\n  const postLink = `https://www.reddit.com${post.permalink}`;\r\n\r\n  return (\r\n    <div css={root}>\r\n      <Typography variant=\"h5\" css={title}>\r\n        <a href={postLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {he.decode(post.title)}\r\n        </a>\r\n      </Typography>\r\n      <div>\r\n        <Typography variant='h4'>\r\n          {post.subreddit_name_prefixed}\r\n        </Typography>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTitleAndMetadata.propTypes = {\r\n  post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default TitleAndMetadata;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst thumbnail = css`\r\n  margin: auto 4% auto 0;\r\n  width: auto;\r\n  max-height: 7em;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nfunction Thumbnail(props){\r\n  return (\r\n    <img alt='thumbnail' css={thumbnail} {...props} />\r\n  );\r\n}\r\n\r\nThumbnail.propTypes = {\r\n  src: PropTypes.string.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Thumbnail;","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst video = css`\r\n  max-height: 30em;\r\n`;\r\n\r\nfunction Video({src}) {\r\n  return (\r\n    <video muted loop autoPlay controls css={video}>\r\n      <source src={src}/>\r\n    </video>\r\n  );\r\n}\r\n\r\nVideo.propTypes = {\r\n  src: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Video;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst calc = (x, y) => [\r\n  -(y - window.innerHeight / 2) / 20,\r\n  (x - window.innerWidth / 2) / 20,\r\n  1.25\r\n];\r\nconst trans = (x, y, s) => \r\n  `perspective(1200px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\r\n\r\nfunction AnimatedHover (props) {\r\n  const [hoverProps, set] = useSpring(() => ({\r\n    xys: [0, 0, 1],\r\n    config: { mass: 3, tension: 400, friction: 40 }\r\n  }));\r\n\r\n  return (\r\n    <animated.div\r\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n      style={{ transform: hoverProps.xys.interpolate(trans) }}\r\n    > \r\n      {props.children}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nAnimatedHover.propTypes = {\r\n  children: PropTypes.object.isRequired\r\n};\r\n\r\nexport default AnimatedHover;","import React, { useState, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst defaultExpand = false;\r\nexport const ExpandContext = React.createContext(defaultExpand);\r\n\r\nexport default function ExpandProvider({children}) {\r\n  const [autoExpand, setAutoExpand] = useState(defaultExpand);\r\n  const context = [autoExpand, setAutoExpand];\r\n\r\n  return (\r\n    <ExpandContext.Provider value={context}>\r\n      {children}\r\n    </ExpandContext.Provider>\r\n  );\r\n}\r\n\r\nExpandProvider.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n\r\nexport function useExpand() {\r\n  const [autoExpand, setAutoExpand] = useContext(ExpandContext);\r\n  return [autoExpand, setAutoExpand];\r\n}\r\n\r\n","/** @jsx jsx */\r\nimport { useState, useEffect } from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Typography, IconButton, Collapse, Grow } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Markdown from 'react-markdown';\r\nimport he from 'he';\r\nimport Votes from \"./Votes\";\r\nimport TitleAndMetadata from \"./TitleAndMetadata\";\r\nimport Thumbnail from './Thumbnail';\r\nimport Video from './Video';\r\nimport AnimatedHover from './AnimatedHover';\r\nimport { useExpand } from '../shared/ExpandProvider';\r\n\r\nconst card = css`\r\n  min-width: 275px;\r\n  margin: 1em auto;\r\n  h5 {\r\n    font-size: 13pt;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n`;\r\nconst cardContent = css`\r\n  display: flex;\r\n  padding: 1em 3%;\r\n`;\r\nconst sourceImg = css`\r\n  max-height: 30em;\r\n  max-width: 100%;\r\n  margin: auto 0;\r\n  display: block;\r\n`;\r\nconst exapnd = css`\r\n  height: fit-content;\r\n  margin: auto 0 auto auto;\r\n`;\r\nconst collapse = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nconst collapseContent = css`\r\n  padding: 0 2em 1em 2em;\r\n`;\r\nconst text = css`\r\n  p {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\nfunction Post({ post, growIn = true}) {\r\n  const [autoExpand] = useExpand();\r\n  const [expanded, setExpanded] = useState(autoExpand);\r\n  const handleExpanded = () => setExpanded(!expanded);\r\n  \r\n  useEffect(() => {\r\n    setExpanded(autoExpand);\r\n  }, [autoExpand]);\r\n\r\n  const hasThumbnail = post.thumbnail.startsWith('http');\r\n  const urlWithoutQuery = post.url.split('?')[0];\r\n  const hasImage = ['.jpg', '.jpeg', '.gif', '.png']\r\n    .some(ext => urlWithoutQuery.endsWith(ext));\r\n  const hasText = post.selftext && post.selftext.length > 0;\r\n  const hasVideo = post.media && post.media.reddit_video && \r\n    post.media.reddit_video.fallback_url;\r\n  const hasEmbed = post.media_embed && post.media_embed.content;\r\n  const canExpand = (hasImage || hasText || hasVideo || hasEmbed);\r\n  \r\n  return (\r\n    <Grow in={growIn} timeout={500}>\r\n      <Card css={card}>\r\n        <div css={cardContent}>\r\n          <Votes votes={post.ups} />\r\n          {hasThumbnail && \r\n          <Thumbnail src={post.thumbnail} \r\n            height={post.thumbnail_height} onClick={handleExpanded}/>}\r\n          <TitleAndMetadata post={post}/>\r\n          {canExpand && \r\n          <IconButton css={exapnd} onClick={handleExpanded} aria-expanded={expanded}>\r\n            <ExpandMoreIcon/>\r\n          </IconButton>}\r\n        </div>\r\n        {canExpand && \r\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit css={collapse}>\r\n          <div css={collapseContent}>\r\n            {hasImage && \r\n            <AnimatedHover>\r\n              <img src={post.url} alt='source' css={sourceImg}/>\r\n            </AnimatedHover>}\r\n            {hasVideo && <Video src={post.media.reddit_video.fallback_url}/>}\r\n            {hasEmbed && \r\n            <div dangerouslySetInnerHTML={{__html: he.decode(post.media_embed.content)}}/>}\r\n            {hasText && \r\n            <Typography variant='h5' css={text}>\r\n              <Markdown source={he.decode(post.selftext)}/>\r\n            </Typography>}\r\n          </div>\r\n        </Collapse>}\r\n      </Card>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n  growIn: PropTypes.bool,\r\n};\r\n\r\nexport default Post;\r\n","export const redditUrl = 'https://www.reddit.com';\r\n\r\nexport const filters = [\r\n  {label: 'Hot', value: 'hot'},\r\n  {label: 'Top Hour', value: 'top hour'},\r\n  {label: 'Top Day', value: 'top day'},\r\n  {label: 'Top Week', value: 'top week'},\r\n  {label: 'Top Month', value: 'top month'},\r\n  {label: 'Top All Time', value: 'top all'},\r\n  {label: 'New', value: 'new'},\r\n  {label: 'Best', value: 'best'},\r\n  {label: 'Controversial', value: 'controversial'},\r\n];\r\n\r\nexport const githubLink = 'https://github.com/orelkan/react-reddit-client';","/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, FormControl, InputLabel,\r\n  Select, OutlinedInput, MenuItem } from \"@material-ui/core\";\r\nimport { filters } from '../../consts';\r\n\r\nconst root = css`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst formControl = css`\r\n  min-width: 120px;\r\n`;\r\n\r\nfunction SubRedditHeader({subreddit, filter, onSelection}) {\r\n  return (\r\n    <div css={root}>\r\n      <Typography variant=\"h2\">\r\n        {`/r/${subreddit}`}\r\n      </Typography>\r\n      <FormControl variant=\"outlined\" css={formControl}>\r\n        <InputLabel>Order</InputLabel>\r\n        <Select\r\n          value={filter}\r\n          onChange={e => onSelection(e.target.value)}\r\n          input={\r\n            <OutlinedInput labelWidth={43}/>\r\n          }\r\n        >\r\n          {filters.map(({label, value}) => \r\n            <MenuItem key={value} value={value}>{label}</MenuItem>\r\n          )}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n\r\nSubRedditHeader.propTypes = {\r\n  subreddit: PropTypes.string.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SubRedditHeader;","/** @jsx jsx */\r\nimport { memo } from 'react';\r\nimport { useState, useEffect } from \"react\";\r\nimport { jsx, css } from '@emotion/core';\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport Post from \"../Post/Post\";\r\nimport { redditUrl } from '../../consts';\r\nimport SubRedditHeader from './SubRedditHeader';\r\n\r\nconst root = css`\r\n  margin: 2em 7%;\r\n`;\r\nconst centeredProgress = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: auto;\r\n`;\r\nconst bigProgress = css`\r\n  ${centeredProgress};\r\n  width: 8em !important;\r\n  height: 8em !important;\r\n  margin-top: 3em;\r\n`;\r\n\r\nconst ErrorDisplay = () => (\r\n  <Typography variant=\"h3\" gutterBottom>\r\n    No such Subreddit\r\n  </Typography>\r\n);\r\n\r\nconst defaultFilter = 'hot';\r\n\r\nfunction SubReddit(props) {\r\n  const [posts, setPosts] = useState(null);\r\n  const [loadingPosts, setLoadingPosts] = useState(false);\r\n  const [lastRequestResult, setLastRequestResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [filter, setFilter] = useState(defaultFilter);\r\n  const [filterType, time] = filter.split(' ');\r\n  const requestUrl = `${redditUrl}/r/${props.subreddit}/${filterType}.json` + \r\n  ((time) ? `?t=${time}` : '');\r\n  // Transform the raw data by extracting the nested posts\r\n  const requestResToPosts = res => res.data.data.children.map(obj => obj.data);\r\n\r\n  // Loading posts on subreddit or filter change\r\n  useEffect(() => {\r\n    setLoadingPosts(true);\r\n    axios\r\n      .get(requestUrl)\r\n      .then(res => {\r\n        const posts = requestResToPosts(res);\r\n        setLoadingPosts(false);\r\n        setLastRequestResult(res.data.data);\r\n        setError(null);\r\n        setPosts(posts);\r\n      })\r\n      .catch(err => {\r\n        setLoadingPosts(false);\r\n        setError(err);\r\n        setPosts(null);\r\n      });\r\n  }, [props.subreddit, requestUrl]);\r\n  \r\n  // Loading more posts when scrolled to the bottom of the page\r\n  useEffect(() => {\r\n    if (loadingMore && !loadingPosts && lastRequestResult.after) {\r\n      const after = lastRequestResult.after;\r\n      axios\r\n        .get(requestUrl + '?after=' + after)\r\n        .then(res => {\r\n          const morePosts = requestResToPosts(res);\r\n          setPosts(prevPosts => prevPosts && prevPosts.concat(morePosts));\r\n          setLastRequestResult(res.data.data);\r\n          setLoadingMore(false);\r\n        })\r\n        .catch(() => {\r\n          setLoadingMore(false);\r\n        });\r\n    } else {\r\n      setLoadingMore(false);\r\n    }\r\n  }, [loadingMore, lastRequestResult, loadingPosts, requestUrl]);\r\n\r\n  // Setting the scroll event listener \r\n  useEffect(() => {\r\n    function handleScroll() {\r\n      const el = document.getElementById('root');\r\n      if (!loadingMore && \r\n          el.getBoundingClientRect().bottom <= window.innerHeight) {\r\n        setLoadingMore(true);\r\n      }\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, [loadingMore]);\r\n\r\n  return (\r\n    <div css={root}>\r\n      <SubRedditHeader subreddit={props.subreddit} \r\n        filter={filter} onSelection={setFilter}/>\r\n      {loadingPosts && <CircularProgress css={bigProgress} />}\r\n      {posts && posts.map(post => \r\n        <Post post={post} key={post.id} growIn={!loadingPosts} />)}\r\n      {error && !loadingPosts && <ErrorDisplay/>}\r\n      {loadingMore && <CircularProgress css={centeredProgress}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nSubReddit.propTypes = {\r\n  subreddit: PropTypes.string.isRequired\r\n};\r\n\r\nexport default memo(SubReddit);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/ArrowRightAlt';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -12,\r\n    marginRight: 20,\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing.unit,\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing.unit * 9,\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%',\r\n  },\r\n  inputInput: {\r\n    paddingTop: theme.spacing.unit,\r\n    paddingRight: theme.spacing.unit,\r\n    paddingBottom: theme.spacing.unit,\r\n    paddingLeft: theme.spacing.unit * 10,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: 120,\r\n      '&:focus': {\r\n        width: 200,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction SearchAppBar(props) {\r\n  const { classes } = props;\r\n\r\n  function handleKeyPress(event) {\r\n    if (event.key === 'Enter') {\r\n      window.scrollTo(0, 0);\r\n      props.onSubredditChange(event);\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton onClick={props.onMenuClick} className={classes.menuButton} color=\"inherit\" aria-label=\"Open drawer\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" noWrap>\r\n            React Reddit Client\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Go to subreddit\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchAppBar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n  onMenuClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(SearchAppBar);\r\n","import React from 'react';\r\nimport { Dialog, DialogTitle, DialogContent, \r\n  DialogContentText, DialogActions, Button } from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport { githubLink } from '../../consts';\r\n\r\n\r\nfunction AboutModal({open, onClose}) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={onClose}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        About\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          Personal project by Orel Kanditan <br/>\r\n          Made using React, Material UI and Emotion <br/>\r\n          See the source code on {' '}\r\n          <a href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            GitHub\r\n          </a>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" autoFocus>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nAboutModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default AboutModal;","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { useState } from \"react\";\r\nimport { PropTypes } from 'prop-types';\r\nimport { SwipeableDrawer, List, ListItem, ListItemText, \r\n  ListItemIcon, Typography, Divider, FormControlLabel, Switch} from '@material-ui/core';\r\nimport { InvertColors, InvertColorsOff, Info } from '@material-ui/icons';\r\nimport AboutModal from './AboutModal';\r\nimport { useExpand } from \"../shared/ExpandProvider\";\r\n\r\nconst root = css`\r\n  width: 250px;\r\n`;\r\nconst title = css`\r\n  margin: 0.5em;\r\n`;\r\nconst autoExpandListItem = css`\r\n  height: 3em;\r\n`;\r\nconst formControlLabel = css`\r\n  .label {\r\n    font-size: 1rem;\r\n    margin-left: 8px;\r\n  }\r\n`;\r\n\r\nfunction AppDrawer({open, onOpen, onClose, onSelection}) {\r\n  const [aboutOpen, setAboutOpen] = useState(false);\r\n  const [autoExpand, setAutoExpand] = useExpand();\r\n\r\n  function handleExpandSwitch() {\r\n    onClose();\r\n    setAutoExpand(!autoExpand);\r\n  }\r\n\r\n  return (\r\n    <SwipeableDrawer open={open} onClose={onClose} onOpen={onOpen}>\r\n      <div css={root}>\r\n        <Typography variant='h5' css={title}>\r\n          React Reddit Client\r\n        </Typography>\r\n        <Divider/>\r\n        <List>\r\n          <ListItem button onClick={() => onSelection('light')}>\r\n            <ListItemIcon><InvertColors/></ListItemIcon>\r\n            <ListItemText primary='Light theme'/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => onSelection('dark')}>\r\n            <ListItemIcon><InvertColorsOff/></ListItemIcon>\r\n            <ListItemText primary='Dark theme'/>\r\n          </ListItem>\r\n          <ListItem button css={autoExpandListItem}>\r\n            <FormControlLabel\r\n              css={formControlLabel}\r\n              classes={{label: 'label'}}\r\n              control={\r\n                <Switch checked={autoExpand} \r\n                  onChange={handleExpandSwitch} />\r\n              }\r\n              label=\"Auto Expand\"/>\r\n          </ListItem>\r\n          <ListItem button onClick={() => setAboutOpen(true)}>\r\n            <ListItemIcon><Info/></ListItemIcon>\r\n            <ListItemText primary='About'/>\r\n          </ListItem>\r\n        </List>\r\n        <AboutModal open={aboutOpen} onClose={() => setAboutOpen(false)}/>\r\n      </div>\r\n    </SwipeableDrawer>\r\n  );\r\n}\r\n\r\nAppDrawer.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSelection: PropTypes.func.isRequired,\r\n  onOpen: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppDrawer;","import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport AppBar from './AppBar';\r\nimport AppDrawer from './AppDrawer';\r\n\r\nfunction AppBarAndDrawer({onSubredditChange, onSelection}) {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  function handleSelection(selected) {\r\n    setDrawerOpen(false);\r\n    onSelection(selected);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar onSubredditChange={onSubredditChange} \r\n        onMenuClick={() => setDrawerOpen(true)}/>\r\n      <AppDrawer open={drawerOpen} \r\n        onSelection={handleSelection}\r\n        onOpen={() => setDrawerOpen(true)}\r\n        onClose={() => setDrawerOpen(false)}/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAppBarAndDrawer.propTypes = {\r\n  onSelection: PropTypes.func.isRequired,\r\n  onSubredditChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AppBarAndDrawer;","/** @jsx jsx */\r\nimport { useState } from 'react';\r\nimport { Global, jsx, css } from \"@emotion/core\";\r\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { StylesProvider } from \"@material-ui/styles\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport SubReddit from './SubReddit/SubReddit';\r\nimport AppBarAndDrawer from './App/AppBarAndDrawer';\r\nimport ExpandProvider from './shared/ExpandProvider';\r\n\r\nconst content = css`\r\n  margin-top: 5em;\r\n`;\r\nconst scrollbar = css`\r\n  body::-webkit-scrollbar {\r\n    width: 0.8em;\r\n  }\r\n  body::-webkit-scrollbar-track {\r\n    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n    box-shadow: inset 0 0 6px rgba(0,0,0,0.3);\r\n  }\r\n  body::-webkit-scrollbar-thumb {\r\n    background-color: #383838;\r\n    outline: 1px solid slategrey;\r\n  }\r\n`;\r\n\r\nconst darkColor = '#181a1b';\r\nconst defaultVariant = 'dark';\r\n\r\nfunction App() {\r\n  const [subreddit, setSubreddit] = useState('all');\r\n  const [themeVariant, setThemeVariant] = useState(defaultVariant);\r\n\r\n  function handleSubChange(event) {\r\n    setSubreddit(event.target.value);\r\n  }\r\n\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {main: red[800]},\r\n      secondary: {main: red[300]},\r\n      type: themeVariant\r\n    },\r\n    typography: {\r\n      useNextVariants: true,\r\n    },\r\n  });\r\n\r\n  const linkColor = css`\r\n    a {\r\n      color: lightblue;\r\n    }\r\n  `;\r\n  const bgColor = themeVariant === 'dark' ? darkColor : 'inherit';\r\n  const global = css`\r\n    ${scrollbar}\r\n    body {\r\n      margin: 0;\r\n      background: ${bgColor};\r\n    }\r\n    ${themeVariant === 'dark' && linkColor}\r\n  `;\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <MuiThemeProvider theme={theme}>\r\n        <Global styles={global}/>\r\n        <ExpandProvider>\r\n          <AppBarAndDrawer onSubredditChange={handleSubChange} \r\n            onSelection={setThemeVariant}/>\r\n          <div css={content}>\r\n            <SubReddit subreddit={subreddit}/>\r\n          </div>\r\n        </ExpandProvider>\r\n      </MuiThemeProvider>\r\n    </StylesProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n"],"sourceRoot":""}